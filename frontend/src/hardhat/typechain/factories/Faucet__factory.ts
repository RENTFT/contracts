/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Faucet } from "../Faucet";

export class Faucet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Faucet> {
    return super.deploy(overrides || {}) as Promise<Faucet>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Faucet {
    return super.attach(address) as Faucet;
  }
  connect(signer: Signer): Faucet__factory {
    return super.connect(signer) as Faucet__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Faucet {
    return new Contract(address, _abi, signerOrProvider) as Faucet;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x747d8434",
        type: "bytes32",
      },
    ],
    name: "c_0x747d8434",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "requestToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610281806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a037eca91461003b578063c8a5da051461007f575b600080fd5b61007d6004803603602081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100ad565b005b6100ab6004803603602081101561009557600080fd5b8101908080359060200190929190505050610248565b005b6100d97f7675ff84f57928cf0d69831da22388bbe7bddc3e899d79ae0f3a3228150f753260001b610248565b6101057f48cc828632feecc7d3a87020b66f00e0916270812cfc765ecf5e92701b45b24660001b610248565b6101317ff9b68c2f4717c5c76d1632ad1ea2b6faccf2bdd7ed694ec499ff4633a412755660001b610248565b60008190506101627fb098a896b632fddc984b4329c34517c81b702bcf580122140bb7e8067b2e1be160001b610248565b61018e7f11444381ed27d06c4c60d9528e998851e869da39cc0ddbcc4aefb8afa5b6be0460001b610248565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33683635c9adc5dea000006040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561020857600080fd5b505af115801561021c573d6000803e3d6000fd5b505050506040513d602081101561023257600080fd5b8101908080519060200190929190505050505050565b5056fea2646970667358221220421ac0c78283548921d9c5115bea672a295f58cc1776674d570f9b50104fe0ae64736f6c63430007060033";
