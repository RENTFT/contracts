{
  "address": "0xB07B144d70315c93b0F3346f380aC148AC04F976",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "claimedAt",
          "type": "uint32"
        }
      ],
      "name": "CollateralClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stoppedAt",
          "type": "uint32"
        }
      ],
      "name": "LendingStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "lentAmount",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lenderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "maxRentDuration",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "dailyRentPrice",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "nftPrice",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isERC721",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum IResolver.PaymentToken",
          "name": "paymentToken",
          "type": "uint8"
        }
      ],
      "name": "Lent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "renterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rentDuration",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "rentedAt",
          "type": "uint32"
        }
      ],
      "name": "Rented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "returnedAt",
          "type": "uint32"
        }
      ],
      "name": "Returned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_maxRentDurations",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_dailyRentPrices",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_nftPrices",
          "type": "bytes4[]"
        },
        {
          "internalType": "enum IResolver.PaymentToken[]",
          "name": "_paymentTokens",
          "type": "uint8[]"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_rentDurations",
          "type": "uint8[]"
        }
      ],
      "name": "rent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        }
      ],
      "name": "returnIt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newBeneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rentFee",
          "type": "uint256"
        }
      ],
      "name": "setRentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        }
      ],
      "name": "stopLending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x74b431f59417893efa2a859c815c29346032648b003c9ea70acd49e6e88ed7fd",
  "receipt": {
    "to": null,
    "from": "0x00000444e5a1a667663b0ADfD853E8Efa0470698",
    "contractAddress": "0xB07B144d70315c93b0F3346f380aC148AC04F976",
    "transactionIndex": 104,
    "gasUsed": "3866470",
    "logsBloom": "0x
    "blockHash": "0xe5b36b5762c9e1fecabf67a99abdc988a630e555b8135b662fb10e4392db672f",
    "transactionHash": "0x74b431f59417893efa2a859c815c29346032648b003c9ea70acd49e6e88ed7fd",
    "logs": [],
    "blockNumber": 12516101,
    "cumulativeGasUsed": "8973498",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x048B2ec9634368f08B9eEFFc5554F022E99A892C",
    "0x28f11c3D76169361D22D8aE53551827Ac03360B0",
    "0x00000444e5a1a667663b0ADfD853E8Efa0470698"
  ],
  "solcInputHash": "4a4580a4db1eb6d48f95705cc9de5804",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"claimedAt\",\"type\":\"uint32\"}],\"name\":\"CollateralClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stoppedAt\",\"type\":\"uint32\"}],\"name\":\"LendingStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lentAmount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxRentDuration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"dailyRentPrice\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"nftPrice\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum IResolver.PaymentToken\",\"name\":\"paymentToken\",\"type\":\"uint8\"}],\"name\":\"Lent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rentDuration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rentedAt\",\"type\":\"uint32\"}],\"name\":\"Rented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"returnedAt\",\"type\":\"uint32\"}],\"name\":\"Returned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_maxRentDurations\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_dailyRentPrices\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_nftPrices\",\"type\":\"bytes4[]\"},{\"internalType\":\"enum IResolver.PaymentToken[]\",\"name\":\"_paymentTokens\",\"type\":\"uint8[]\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_rentDurations\",\"type\":\"uint8[]\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"}],\"name\":\"returnIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rentFee\",\"type\":\"uint256\"}],\"name\":\"setRentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"}],\"name\":\"stopLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimCollateral(address[],uint256[],uint256[])\":{\"details\":\"claim collateral on rentals that are past their due date\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ReNFT.sol\":\"ReNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x21d8a5dd396bee41e4a039d150af08b66b6d09eef416daf8e5edf13ef219084e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/ReNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"./interfaces/IResolver.sol\\\";\\nimport \\\"./interfaces/IReNFT.sol\\\";\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\\ncontract ReNFT is IReNft {\\n    using SafeERC20 for ERC20;\\n\\n    IResolver private resolver;\\n    address private admin;\\n    address payable private beneficiary;\\n    uint256 private lendingId = 1;\\n\\n    // in bps. so 1000 => 1%\\n    uint256 public rentFee = 1000;\\n\\n    // single storage slot: address - 160 bits, 168, 200, 232, 240, 248\\n    struct Lending {\\n        address payable lenderAddress;\\n        uint8 maxRentDuration;\\n        bytes4 dailyRentPrice;\\n        bytes4 nftPrice;\\n        uint8 lentAmount;\\n        IResolver.PaymentToken paymentToken;\\n    }\\n\\n    // single storage slot: 160 bits, 168, 200\\n    struct Renting {\\n        address payable renterAddress;\\n        uint8 rentDuration;\\n        uint32 rentedAt;\\n    }\\n\\n    struct LendingRenting {\\n        Lending lending;\\n        Renting renting;\\n    }\\n\\n    // 32 bytes key to 64 bytes struct\\n    mapping(bytes32 => LendingRenting) private lendingRenting;\\n\\n    struct TwoPointer {\\n        uint256 lastIx;\\n        uint256 currIx;\\n        address[] nfts;\\n        uint256[] tokenIds;\\n        uint256[] lentAmounts;\\n        uint8[] maxRentDurations;\\n        bytes4[] dailyRentPrices;\\n        bytes4[] nftPrices;\\n        uint256[] lendingIds;\\n        uint8[] rentDurations;\\n        IResolver.PaymentToken[] paymentTokens;\\n    }\\n\\n    constructor(\\n        address _resolver,\\n        address payable _beneficiary,\\n        address _admin\\n    ) {\\n        ensureIsNotZeroAddr(_resolver);\\n        ensureIsNotZeroAddr(_beneficiary);\\n        ensureIsNotZeroAddr(_admin);\\n\\n        resolver = IResolver(_resolver);\\n        beneficiary = _beneficiary;\\n        admin = _admin;\\n    }\\n\\n    function twoPointerLoop(\\n        function(TwoPointer memory) f,\\n        TwoPointer memory _tp\\n    ) private {\\n        require(_tp.nfts.length > 0, \\\"invalid nfts len\\\");\\n        if (_tp.nfts.length < 2) {\\n            f(_tp);\\n            return;\\n        }\\n        while (_tp.currIx < _tp.nfts.length) {\\n            if (\\n                (_tp.nfts[_tp.lastIx] == _tp.nfts[_tp.currIx]) &&\\n                (is1155(_tp.nfts[_tp.currIx]))\\n            ) {\\n                _tp.currIx++;\\n                continue;\\n            }\\n            f(_tp);\\n            _tp.lastIx = _tp.currIx;\\n            _tp.currIx++;\\n        }\\n        f(_tp);\\n    }\\n\\n    // lend, rent, return, stop, claim\\n\\n    function lend(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint8[] memory _maxRentDurations,\\n        bytes4[] memory _dailyRentPrices,\\n        bytes4[] memory _nftPrices,\\n        IResolver.PaymentToken[] memory _paymentTokens\\n    ) external override {\\n        twoPointerLoop(\\n            handleLend,\\n            createLendTP(\\n                _nfts,\\n                _tokenIds,\\n                _lendAmounts,\\n                _maxRentDurations,\\n                _dailyRentPrices,\\n                _nftPrices,\\n                _paymentTokens\\n            )\\n        );\\n    }\\n\\n    function rent(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendingIds,\\n        uint8[] memory _rentDurations\\n    ) external override {\\n        twoPointerLoop(\\n            handleRent,\\n            createRentTP(_nfts, _tokenIds, _lendingIds, _rentDurations)\\n        );\\n    }\\n\\n    function returnIt(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendingIds\\n    ) external override {\\n        twoPointerLoop(\\n            handleReturn,\\n            createActionTP(_nfts, _tokenIds, _lendingIds)\\n        );\\n    }\\n\\n    function stopLending(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendingIds\\n    ) external override {\\n        twoPointerLoop(\\n            handleStopLending,\\n            createActionTP(_nfts, _tokenIds, _lendingIds)\\n        );\\n    }\\n\\n    function claimCollateral(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendingIds\\n    ) external override {\\n        twoPointerLoop(\\n            handleClaimCollateral,\\n            createActionTP(_nfts, _tokenIds, _lendingIds)\\n        );\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function takeFee(uint256 _rent, IResolver.PaymentToken _paymentToken)\\n        private\\n        returns (uint256 fee)\\n    {\\n        fee = _rent * rentFee;\\n        fee /= 10000;\\n        uint8 paymentTokenIx = uint8(_paymentToken);\\n        // ReNFT fee\\n        ERC20 paymentToken = ERC20(resolver.getPaymentToken(paymentTokenIx));\\n        paymentToken.safeTransfer(beneficiary, fee);\\n    }\\n\\n    function distributePayments(\\n        LendingRenting storage _lendingRenting,\\n        uint256 _secondsSinceRentStart\\n    ) private {\\n        // enum to uint8\\n        uint8 paymentTokenIx = uint8(_lendingRenting.lending.paymentToken);\\n        // uint8 to paymentToken address\\n        address paymentToken = resolver.getPaymentToken(paymentTokenIx);\\n        uint256 decimals = ERC20(paymentToken).decimals();\\n\\n        // lender receives amounts proportional to the amount of time the NFT was used\\n        uint256 scale = 10**decimals;\\n        uint256 nftPrice = unpackPrice(_lendingRenting.lending.nftPrice, scale);\\n        uint256 rentPrice =\\n            unpackPrice(_lendingRenting.lending.dailyRentPrice, scale);\\n        uint256 totalRenterPmtWoCollateral =\\n            rentPrice * _lendingRenting.renting.rentDuration;\\n        uint256 sendLenderAmt = (_secondsSinceRentStart * rentPrice) / 86400;\\n\\n        require(\\n            totalRenterPmtWoCollateral > 0,\\n            \\\"total payment wo collateral is zero\\\"\\n        );\\n        require(sendLenderAmt > 0, \\\"lender payment is zero\\\");\\n        require(\\n            totalRenterPmtWoCollateral >= sendLenderAmt,\\n            \\\"lender receiving more than renter pmt\\\"\\n        );\\n\\n        uint256 sendRenterAmt = totalRenterPmtWoCollateral - sendLenderAmt;\\n        require(\\n            sendRenterAmt < totalRenterPmtWoCollateral,\\n            \\\"underflow issues prevention\\\"\\n        );\\n\\n        // the fee is always taken from the lender\\n        // the renter contributes the lump sum of all the days prepaid + collateral\\n        // lender is generating yield from their NFT\\n        // the fee is taken propotionally to the time the asset was rented\\n        uint256 takenFee =\\n            takeFee(sendLenderAmt, _lendingRenting.lending.paymentToken);\\n\\n        sendLenderAmt -= takenFee;\\n        sendRenterAmt += nftPrice;\\n\\n        ERC20(paymentToken).safeTransfer(\\n            _lendingRenting.lending.lenderAddress,\\n            sendLenderAmt\\n        );\\n        ERC20(paymentToken).safeTransfer(\\n            _lendingRenting.renting.renterAddress,\\n            sendRenterAmt\\n        );\\n    }\\n\\n    function distributeClaimPayment(LendingRenting memory _lendingRenting)\\n        private\\n    {\\n        uint8 paymentTokenIx = uint8(_lendingRenting.lending.paymentToken);\\n        ERC20 paymentToken = ERC20(resolver.getPaymentToken(paymentTokenIx));\\n\\n        uint256 decimals = ERC20(paymentToken).decimals();\\n        uint256 scale = 10**decimals;\\n        uint256 nftPrice = unpackPrice(_lendingRenting.lending.nftPrice, scale);\\n        uint256 rentPrice =\\n            unpackPrice(_lendingRenting.lending.dailyRentPrice, scale);\\n        uint256 maxRentPayment =\\n            rentPrice * _lendingRenting.renting.rentDuration;\\n        // ReNFT's fee\\n        uint256 takenFee =\\n            takeFee(maxRentPayment, IResolver.PaymentToken(paymentTokenIx));\\n        uint256 finalAmt = maxRentPayment + nftPrice;\\n\\n        require(maxRentPayment > 0, \\\"maxRentPayment is zero\\\");\\n        require(\\n            maxRentPayment == finalAmt - nftPrice,\\n            \\\"maxRentPayment is incorrect\\\"\\n        );\\n\\n        paymentToken.safeTransfer(\\n            _lendingRenting.lending.lenderAddress,\\n            finalAmt - takenFee\\n        );\\n    }\\n\\n    function safeTransfer(\\n        TwoPointer memory _tp,\\n        address _from,\\n        address _to\\n    ) private {\\n        if (is721(_tp.nfts[_tp.lastIx])) {\\n            IERC721(_tp.nfts[_tp.lastIx]).transferFrom(\\n                _from,\\n                _to,\\n                _tp.tokenIds[_tp.lastIx]\\n            );\\n        } else if (is1155(_tp.nfts[_tp.lastIx])) {\\n            IERC1155(_tp.nfts[_tp.lastIx]).safeBatchTransferFrom(\\n                _from,\\n                _to,\\n                sliceArr(_tp.tokenIds, _tp.lastIx, _tp.currIx),\\n                sliceArr(_tp.lentAmounts, _tp.lastIx, _tp.currIx),\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"unsupported token type\\\");\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function handleLend(TwoPointer memory _tp) private {\\n        // for individual tokenIds within the same 1155\\n        // or\\n        // for ERC721s\\n        for (uint256 i = _tp.lastIx; i < _tp.currIx; i++) {\\n            ensureIsLendable(_tp, i);\\n\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            // no need to use i, since the nft will repeat\\n                            // so can access at the same memory location all the time\\n                            _tp.nfts[_tp.lastIx],\\n                            _tp.tokenIds[i],\\n                            // makes the whole thing unique, in case someone else turns\\n                            // up with the same nft and tokenId\\n                            lendingId\\n                        )\\n                    )\\n                ];\\n\\n            // should never happen\\n            ensureIsNull(item.lending);\\n            // sanity check\\n            ensureIsNull(item.renting);\\n\\n            // about lentAmount\\n            // we have already checked that this is a valid uint8 amount in ensureIsLendable\\n\\n            // about maxRentDuration\\n            // is a uint8 by default. The above is uint256 for convenience of batch transfers\\n            // the erc1155 batch transfer accepts an array of uint256. So to avoid casting, we\\n            // accept uint256, but check that it is uint8 in  ensureIsLendable\\n\\n            bool nftIs721 = is721(_tp.nfts[i]);\\n            // about dailyRentPrice\\n            // both the dailyRentPrices and nftPrices have been checked for valid non-zero amounts\\n            // in the ensureIsLendable\\n            item.lending = Lending({\\n                lenderAddress: payable(msg.sender),\\n                lentAmount: nftIs721 ? 1 : uint8(_tp.lentAmounts[i]),\\n                maxRentDuration: _tp.maxRentDurations[i],\\n                dailyRentPrice: _tp.dailyRentPrices[i],\\n                nftPrice: _tp.nftPrices[i],\\n                paymentToken: _tp.paymentTokens[i]\\n            });\\n\\n            emit Lent(\\n                _tp.nfts[_tp.lastIx],\\n                _tp.tokenIds[i],\\n                nftIs721 ? 1 : uint8(_tp.lentAmounts[i]),\\n                lendingId,\\n                msg.sender,\\n                _tp.maxRentDurations[i],\\n                _tp.dailyRentPrices[i],\\n                _tp.nftPrices[i],\\n                nftIs721,\\n                _tp.paymentTokens[i]\\n            );\\n\\n            lendingId++;\\n        }\\n\\n        // finally we transfer the NFTs from the sender to this ReNFT contract\\n        safeTransfer(_tp, msg.sender, address(this));\\n    }\\n\\n    function handleRent(TwoPointer memory _tp) private {\\n        for (uint256 i = _tp.lastIx; i < _tp.currIx; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            // no need to use i, since the nft will repeat\\n                            // so can access at the same memory location all the time\\n                            _tp.nfts[_tp.lastIx],\\n                            _tp.tokenIds[i],\\n                            _tp.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            // // a lending item must exist to be able to rent it\\n            ensureIsNotNull(item.lending);\\n            // // should never happen\\n            ensureIsNull(item.renting);\\n            // // checks that requested rent duration is below the lending max rent duration\\n            // // that the renter is not the lender\\n            // // and that the rent duration is at least a day\\n            ensureIsRentable(item.lending, _tp, i, msg.sender);\\n\\n            // from enum to uint8\\n            uint8 paymentTokenIx = uint8(item.lending.paymentToken);\\n            // from uint8 to address\\n            address paymentToken = resolver.getPaymentToken(paymentTokenIx);\\n            uint256 decimals = ERC20(paymentToken).decimals();\\n\\n            {\\n                uint256 scale = 10**decimals;\\n                uint256 rentPrice =\\n                    _tp.rentDurations[i] *\\n                        unpackPrice(item.lending.dailyRentPrice, scale);\\n                uint256 nftPrice =\\n                    item.lending.lentAmount *\\n                        unpackPrice(item.lending.nftPrice, scale);\\n\\n                // extra sanity checks, even though we have checked for zeros before\\n                require(rentPrice > 0, \\\"rent price is zero\\\");\\n                require(nftPrice > 0, \\\"nft price is zero\\\");\\n\\n                uint256 upfrontPayment = rentPrice + nftPrice;\\n\\n                // if this is an erc20 transaction - send immediately\\n                // lock up the lump sum in escrow\\n                ERC20(paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    upfrontPayment\\n                );\\n            }\\n\\n            item.renting.renterAddress = payable(msg.sender);\\n            // these are uint8s by default\\n            item.renting.rentDuration = _tp.rentDurations[i];\\n            item.renting.rentedAt = uint32(block.timestamp);\\n\\n            emit Rented(\\n                _tp.lendingIds[i],\\n                msg.sender,\\n                _tp.rentDurations[i],\\n                uint32(block.timestamp)\\n            );\\n        }\\n\\n        safeTransfer(_tp, address(this), msg.sender);\\n    }\\n\\n    function handleReturn(TwoPointer memory _tp) private {\\n        for (uint256 i = _tp.lastIx; i < _tp.currIx; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            // no need to use i, since the nft will repeat\\n                            // so can access at the same memory location all the time\\n                            _tp.nfts[_tp.lastIx],\\n                            _tp.tokenIds[i],\\n                            _tp.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            // to return, there must be a lending item\\n            ensureIsNotNull(item.lending);\\n            // ensures that\\n            // the user returning is the renter\\n            // and that the return date is not yet due\\n            ensureIsReturnable(item.renting, msg.sender, block.timestamp);\\n\\n            uint256 secondsSinceRentStart =\\n                block.timestamp - item.renting.rentedAt;\\n            distributePayments(item, secondsSinceRentStart);\\n\\n            emit Returned(_tp.lendingIds[i], uint32(block.timestamp));\\n\\n            delete item.renting;\\n        }\\n\\n        // sending the NFTs back to the ReNFT contract for continuous lending\\n        // by default the lending continues after return so that the lender\\n        // does not have to re-lend after every rent\\n        safeTransfer(_tp, msg.sender, address(this));\\n    }\\n\\n    function handleStopLending(TwoPointer memory _tp) private {\\n        for (uint256 i = _tp.lastIx; i < _tp.currIx; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            // no need to use i, since the nft will repeat\\n                            // so can access at the same memory location all the time\\n                            _tp.nfts[_tp.lastIx],\\n                            _tp.tokenIds[i],\\n                            _tp.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            // lending item must exist to stop lending\\n            ensureIsNotNull(item.lending);\\n            // renting must not exist to stop lending\\n            ensureIsNull(item.renting);\\n            ensureIsStoppable(item.lending, msg.sender);\\n\\n            emit LendingStopped(_tp.lendingIds[i], uint32(block.timestamp));\\n\\n            delete item.lending;\\n        }\\n\\n        safeTransfer(_tp, address(this), msg.sender);\\n    }\\n\\n    /**\\n     * conditions for claim\\n     * 1. availableAmount = 0\\n     * 2. isPastReturnDate\\n     */\\n    function handleClaimCollateral(TwoPointer memory _tp) private {\\n        for (uint256 i = _tp.lastIx; i < _tp.currIx; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _tp.nfts[_tp.lastIx],\\n                            _tp.tokenIds[i],\\n                            _tp.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            // to claim the collateral, you need to have something in lending\\n            ensureIsNotNull(item.lending);\\n            // and renting\\n            ensureIsNotNull(item.renting);\\n            ensureIsClaimable(item.renting, block.timestamp);\\n\\n            distributeClaimPayment(item);\\n\\n            emit CollateralClaimed(_tp.lendingIds[i], uint32(block.timestamp));\\n\\n            delete item.lending;\\n            delete item.renting;\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        // 0xf0b9e5ba === `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`\\n        // 0xf0b9e5ba === `ERC721Receiver(0).onERC721Received.selector`\\n        return 0xf0b9e5ba;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        return 0xbc197c81;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")) = 0xf23a6e61\\n        // ! note that single 1155 receives are not supported. So if you send something\\n        // ! directly, it will be forever lost\\n        return 0xf23a6e61;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        return\\n            (interfaceId == type(IERC721Receiver).interfaceId) ||\\n            (interfaceId == type(IERC1155Receiver).interfaceId);\\n    }\\n\\n    function is721(address _nft) private view returns (bool) {\\n        return IERC165(_nft).supportsInterface(type(IERC721).interfaceId);\\n    }\\n\\n    function is1155(address _nft) private view returns (bool) {\\n        return IERC165(_nft).supportsInterface(type(IERC1155).interfaceId);\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function createLendTP(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint8[] memory _maxRentDurations,\\n        bytes4[] memory _dailyRentPrices,\\n        bytes4[] memory _nftPrices,\\n        IResolver.PaymentToken[] memory _paymentTokens\\n    ) private pure returns (TwoPointer memory tp) {\\n        tp = TwoPointer({\\n            lastIx: 0,\\n            currIx: 1,\\n            nfts: _nfts,\\n            tokenIds: _tokenIds,\\n            lentAmounts: _lendAmounts,\\n            lendingIds: new uint256[](0),\\n            rentDurations: new uint8[](0),\\n            maxRentDurations: _maxRentDurations,\\n            dailyRentPrices: _dailyRentPrices,\\n            nftPrices: _nftPrices,\\n            paymentTokens: _paymentTokens\\n        });\\n    }\\n\\n    function createRentTP(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendingIds,\\n        uint8[] memory _rentDurations\\n    ) private pure returns (TwoPointer memory tp) {\\n        tp = TwoPointer({\\n            lastIx: 0,\\n            currIx: 1,\\n            nfts: _nfts,\\n            tokenIds: _tokenIds,\\n            lentAmounts: new uint256[](0),\\n            lendingIds: _lendingIds,\\n            rentDurations: _rentDurations,\\n            maxRentDurations: new uint8[](0),\\n            dailyRentPrices: new bytes4[](0),\\n            nftPrices: new bytes4[](0),\\n            paymentTokens: new IResolver.PaymentToken[](0)\\n        });\\n    }\\n\\n    function createActionTP(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendingIds\\n    ) private pure returns (TwoPointer memory tp) {\\n        tp = TwoPointer({\\n            lastIx: 0,\\n            currIx: 1,\\n            nfts: _nfts,\\n            tokenIds: _tokenIds,\\n            lentAmounts: new uint256[](0),\\n            lendingIds: _lendingIds,\\n            rentDurations: new uint8[](0),\\n            maxRentDurations: new uint8[](0),\\n            dailyRentPrices: new bytes4[](0),\\n            nftPrices: new bytes4[](0),\\n            paymentTokens: new IResolver.PaymentToken[](0)\\n        });\\n    }\\n\\n    function unpackPrice(bytes4 _price, uint256 _scale)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        ensureIsUnpackablePrice(_price, _scale);\\n\\n        // whole := if _price is 0x00120034, then whole is uint16(0x0012)\\n        // decimal := uin16(0x0034)\\n        // we only support dp4 precision for decimals. i.e. you can only have\\n        // numerals after the decimal place ABCD.wxyz. e.g. 1.8271\\n        // 1.8271 represents amount in the default scale of the payment token\\n        // i.e. if .decimals() of the ERC20 is 6, then 1.8271 * (10 ** 6)\\n        uint16 whole = uint16(bytes2(_price));\\n        uint16 decimal = uint16(bytes2(_price << 16));\\n        uint256 decimalScale = _scale / 10000;\\n\\n        if (whole > 9999) {\\n            whole = 9999;\\n        }\\n        if (decimal > 9999) {\\n            decimal = 9999;\\n        }\\n\\n        uint256 w = whole * _scale;\\n        uint256 d = decimal * decimalScale;\\n        uint256 price = w + d;\\n\\n        return price;\\n    }\\n\\n    function sliceArr(\\n        uint256[] memory _arr,\\n        uint256 _fromIx,\\n        uint256 _toIx\\n    ) private pure returns (uint256[] memory r) {\\n        r = new uint256[](_arr.length);\\n        for (uint256 i = _fromIx; i < _toIx; i++) {\\n            r[i - _fromIx] = _arr[i];\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function ensureIsNotZeroAddr(address _addr) private pure {\\n        require(_addr != address(0), \\\"addr is a zero address\\\");\\n    }\\n\\n    function ensureIsZeroAddr(address _addr) private pure {\\n        require(_addr == address(0), \\\"addr is not a zero address\\\");\\n    }\\n\\n    function ensureIsNull(Lending memory _lending) private pure {\\n        ensureIsZeroAddr(_lending.lenderAddress);\\n        require(_lending.maxRentDuration == 0, \\\"max rent duration is zero\\\");\\n        require(_lending.dailyRentPrice == 0, \\\"daily rent price is zero\\\");\\n        require(_lending.nftPrice == 0, \\\"nft price is zero\\\");\\n    }\\n\\n    function ensureIsNotNull(Lending memory _lending) private pure {\\n        ensureIsNotZeroAddr(_lending.lenderAddress);\\n        require(_lending.maxRentDuration != 0, \\\"max rent duration is zero\\\");\\n        require(_lending.dailyRentPrice != 0, \\\"daily rent price is zero\\\");\\n        require(_lending.nftPrice != 0, \\\"nft price is zero\\\");\\n    }\\n\\n    function ensureIsNull(Renting memory _renting) private pure {\\n        ensureIsZeroAddr(_renting.renterAddress);\\n        require(_renting.rentDuration == 0, \\\"rent duration is not zero\\\");\\n        require(_renting.rentedAt == 0, \\\"was rented before\\\");\\n    }\\n\\n    function ensureIsNotNull(Renting memory _renting) private pure {\\n        ensureIsNotZeroAddr(_renting.renterAddress);\\n        require(_renting.rentDuration != 0, \\\"rent duration is zero\\\");\\n        require(_renting.rentedAt != 0, \\\"never rented\\\");\\n    }\\n\\n    function ensureIsLendable(TwoPointer memory _tp, uint256 _i) private pure {\\n        // lending at least one token & the amount is less or equal than uint8 max 255\\n        require(_tp.lentAmounts[_i] > 0, \\\"invalid lend amount\\\");\\n        require(_tp.lentAmounts[_i] <= type(uint8).max, \\\"cannot exceed uint8\\\");\\n        require(\\n            _tp.maxRentDurations[_i] <= type(uint8).max,\\n            \\\"cannot exceed uint8\\\"\\n        );\\n        // max rent duration is at least a day. it is uint8 so no need to check for max\\n        require(_tp.maxRentDurations[_i] > 0, \\\"must be at least one day lend\\\");\\n        // ensure that the daily rental price and the collateral prices are not zero\\n        require(\\n            uint32(_tp.dailyRentPrices[_i]) > 0,\\n            \\\"daily rent price is zero\\\"\\n        );\\n        require(uint32(_tp.nftPrices[_i]) > 0, \\\"nft price is zero\\\");\\n    }\\n\\n    function ensureIsRentable(\\n        Lending memory _lending,\\n        TwoPointer memory _tp,\\n        uint256 _i,\\n        address _msgSender\\n    ) private pure {\\n        require(_msgSender != _lending.lenderAddress, \\\"cant rent own nft\\\");\\n        require(\\n            _tp.rentDurations[_i] <= type(uint8).max,\\n            \\\"cannot exceed uint8\\\"\\n        );\\n        require(_tp.rentDurations[_i] > 0, \\\"should rent for at least a day\\\");\\n        require(\\n            _tp.rentDurations[_i] <= _lending.maxRentDuration,\\n            \\\"max rent duration exceeded\\\"\\n        );\\n    }\\n\\n    function ensureIsReturnable(\\n        Renting memory _renting,\\n        address _msgSender,\\n        uint256 _blockTimestamp\\n    ) private pure {\\n        // only renter can return the nft\\n        // and the rent should not be past the due date\\n        require(_renting.renterAddress == _msgSender, \\\"not renter\\\");\\n        require(\\n            !isPastReturnDate(_renting, _blockTimestamp),\\n            \\\"is past return date\\\"\\n        );\\n    }\\n\\n    function ensureIsStoppable(Lending memory _lending, address _msgSender)\\n        private\\n        pure\\n    {\\n        require(_lending.lenderAddress == _msgSender, \\\"only lender allowed\\\");\\n    }\\n\\n    function ensureIsClaimable(Renting memory _renting, uint256 _blockTimestamp)\\n        private\\n        pure\\n    {\\n        require(isPastReturnDate(_renting, _blockTimestamp), \\\"cant claim yet\\\");\\n    }\\n\\n    function ensureIsUnpackablePrice(bytes4 _price, uint256 _scale)\\n        private\\n        pure\\n    {\\n        require(uint32(_price) > 0, \\\"invalid price\\\");\\n        require(_scale >= 10000, \\\"invalid scale\\\");\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function isPastReturnDate(Renting memory _renting, uint256 _now)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        require(_now > _renting.rentedAt, \\\"_now  lt _renting.rentedAt\\\");\\n        return _now - _renting.rentedAt > _renting.rentDuration * 86400;\\n    }\\n\\n    function setRentFee(uint256 _rentFee) external {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        require(_rentFee < 10000, \\\"cannot be taking 100 pct fee madlad\\\");\\n        rentFee = _rentFee;\\n    }\\n\\n    function setBeneficiary(address payable _newBeneficiary) external {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        beneficiary = _newBeneficiary;\\n    }\\n}\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\",\"keccak256\":\"0x8af0c238d0a9d5e9ae112d4ba4122797e8add3056b582b4fec77e8690d2f7119\",\"license\":\"MIT\"},\"src/interfaces/IReNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./IResolver.sol\\\";\\n\\ninterface IReNft is IERC721Receiver, IERC1155Receiver {\\n    /// @dev quick test showed that LentBatch with arrays\\n    /// @dev would cost more than the non-array version\\n    /// @dev like the below\\n    event Lent(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint8 lentAmount,\\n        uint256 lendingId,\\n        address indexed lenderAddress,\\n        uint8 maxRentDuration,\\n        bytes4 dailyRentPrice,\\n        bytes4 nftPrice,\\n        bool isERC721,\\n        IResolver.PaymentToken paymentToken\\n    );\\n\\n    event Rented(\\n        uint256 lendingId,\\n        address indexed renterAddress,\\n        uint8 rentDuration,\\n        uint32 rentedAt\\n    );\\n\\n    event Returned(uint256 indexed lendingId, uint32 returnedAt);\\n\\n    event CollateralClaimed(uint256 indexed lendingId, uint32 claimedAt);\\n\\n    event LendingStopped(uint256 indexed lendingId, uint32 stoppedAt);\\n\\n    /**\\n     * @dev lend will send your NFT to ReNft contract, it acts as an escrow\\n     * contract between the lender and the renter\\n     */\\n    function lend(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendAmounts,\\n        uint8[] memory _maxRentDuration,\\n        bytes4[] memory _dailyRentPrice,\\n        bytes4[] memory _nftPrice,\\n        IResolver.PaymentToken[] memory _paymentToken\\n    ) external;\\n\\n    /**\\n     * @dev on calling this, renter sends rentDuration * dailyRentPrice\\n     * to cover for the potentially full cost of renting. They also\\n     * must send the collateral - nft price set by the lender\\n     */\\n    function rent(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendingIds,\\n        uint8[] memory _rentDurations\\n    ) external;\\n\\n    /**\\n     * @dev renters call this to return the rented NFT before the\\n     * deadline. If they fail to do so, they will lose the posted\\n     * collateral\\n     */\\n    function returnIt(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendingIds\\n    ) external;\\n\\n    /**\\n     * @dev claim collateral on rentals that are past their due date\\n     */\\n    function claimCollateral(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendingIds\\n    ) external;\\n\\n    /**\\n     * @dev stop lending releases the NFT from our escrow and sends it back\\n     * to you\\n     */\\n    function stopLending(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendingIds\\n    ) external;\\n}\\n\",\"keccak256\":\"0x041e6f8a72d213da2b9d9b188e054795d5f7298767fce9c6dc23aeb281cf2bdb\",\"license\":\"MIT\"},\"src/interfaces/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IResolver {\\n    enum PaymentToken {\\n        SENTINEL, // 0 <- marks non-existence, nil of the payment tokens\\n        WETH, // 1\\n        DAI, // 2\\n        USDC, // 3\\n        USDT, // 4\\n        TUSD, // 5\\n        RENT // 6\\n    }\\n\\n    /**\\n     * @dev util function to avoid guessing getter name if addresses was public\\n     */\\n    function getPaymentToken(uint8 _pt) external view returns (address);\\n\\n    /**\\n     * @dev Gives us the ability to set new payment tokens down the line\\n     */\\n    function setPaymentToken(uint8 _pt, address _v) external;\\n}\\n\",\"keccak256\":\"0x2fef77ea0a54ff045d64c0f9d66f561b68f8f1e1e8c717093f3df5e13db8dbfb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016003556103e86004553480156200001c57600080fd5b5060405162004464380380620044648339810160408190526200003f91620000d8565b6200004a83620000a3565b6200005582620000a3565b6200006081620000a3565b600080546001600160a01b039485166001600160a01b03199182161790915560028054938516938216939093179092556001805491909316911617905562000178565b6001600160a01b038116620000d55760405162461bcd60e51b8152600401620000cc906200012b565b60405180910390fd5b50565b600080600060608486031215620000ed578283fd5b8351620000fa8162000162565b60208501519093506200010d8162000162565b6040850151909250620001208162000162565b809150509250925092565b60208082526016908201527f616464722069732061207a65726f206164647265737300000000000000000000604082015260600190565b6001600160a01b0381168114620000d557600080fd5b6142dc80620001886000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806376774ea31161007157806376774ea314610150578063bc197c8114610163578063bf2b23ea14610176578063e50364b21461018b578063f23a6e611461019e578063fb158519146101b1576100b4565b806301ffc9a7146100b9578063098130df146100e2578063150b7a02146100f75780631c31f7101461011757806359fe66e41461012a5780635de07ca31461013d575b600080fd5b6100cc6100c73660046136a4565b6101c4565b6040516100d99190613807565b60405180910390f35b6100f56100f0366004613448565b6101fd565b005b61010a61010536600461335f565b610218565b6040516100d99190613812565b6100f5610125366004613289565b610229565b6100f5610138366004613448565b61027e565b6100f561014b3660046134cb565b61028f565b6100f561015e3660046136be565b6102a7565b61010a6101713660046132a5565b6102f7565b61017e61030b565b6040516100d99190613f6f565b6100f5610199366004613572565b610311565b61010a6101ac3660046133cf565b61032f565b6100f56101bf366004613448565b610341565b60006001600160e01b03198216630a85bd0160e11b14806101f557506001600160e01b03198216630271189760e51b145b90505b919050565b61021361035261020e858585610689565b6107d3565b505050565b63785cf2dd60e11b95945050505050565b6001546001600160a01b0316331461025c5760405162461bcd60e51b815260040161025390613eed565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61021361092961020e858585610689565b6102a1610cd161020e868686866112a8565b50505050565b6001546001600160a01b031633146102d15760405162461bcd60e51b815260040161025390613eed565b61271081106102f25760405162461bcd60e51b815260040161025390613cdd565b600455565b63bc197c8160e01b98975050505050505050565b60045481565b61032661140461020e898989898989896119ed565b50505050505050565b63f23a6e6160e01b9695505050505050565b610213611ac961020e858585610689565b80515b816020015181101561067a57600060056000846040015185600001518151811061038f57634e487b7160e01b600052603260045260246000fd5b6020026020010151856060015185815181106103bb57634e487b7160e01b600052603260045260246000fd5b602002602001015186610100015186815181106103e857634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016104029392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b8404831660808201529093506104ee929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b60068111156104e657634e487b7160e01b600052602160045260246000fd5b905250611d3a565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff169181019190915261053590611dbf565b6040805160c08101825282546001600160a01b038116825260ff600160a01b8204811660208401526001600160e01b0319600160a81b830460e090811b821695850195909552600160c81b830490941b9093166060830152600160e81b8104831660808301526105f692849160a0840191600160f01b9091041660068111156105ce57634e487b7160e01b600052602160045260246000fd5b60068111156105ed57634e487b7160e01b600052602160045260246000fd5b90525033611e17565b826101000151828151811061061b57634e487b7160e01b600052603260045260246000fd5b60200260200101517f61bcecd87c002ae006d9d8c760291b4f3646fa6109590b4b3ea93084aae4bb6a426040516106529190613f97565b60405180910390a280546001600160f81b0319169055806106728161423b565b915050610355565b50610686813033611e4c565b50565b610691612f7b565b604051806101600160405280600081526020016001815260200185815260200184815260200160006001600160401b038111156106de57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610707578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610738578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610769578160200160208202803683370190505b508152602001600060405190808252806020026020018201604052801561079a578160200160208202803683370190505b50815260208082019490945260408051600080825281870183528284019190915281519081529485019052606001929092525092915050565b6000816040015151116107f85760405162461bcd60e51b815260040161025390613a26565b6002816040015151101561081857610813818363ffffffff16565b610925565b8060400151518160200151101561091857806040015181602001518151811061085157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316816040015182600001518151811061088a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161480156108db57506108db81604001518260200151815181106108ce57634e487b7160e01b600052603260045260246000fd5b6020026020010151612010565b156108f857602081018051906108f08261423b565b905250610818565b610905818363ffffffff16565b602081018051808352906108f08261423b565b610925818363ffffffff16565b5050565b80515b816020015181101561092557600060056000846040015185600001518151811061096657634e487b7160e01b600052603260045260246000fd5b60200260200101518560600151858151811061099257634e487b7160e01b600052603260045260246000fd5b602002602001015186610100015186815181106109bf57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016109d99392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350610a9e929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152610ae590612096565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152610b2d90426120ec565b604080516101008101825282546001600160a01b03811692820192835260ff600160a01b8204811660608401526001600160e01b0319600160a81b830460e090811b82166080860152600160c81b8404811b90911660a0850152600160e81b8304821660c0850152610c3c94869385939192859290850191600160f01b9004166006811115610bcc57634e487b7160e01b600052602160045260246000fd5b6006811115610beb57634e487b7160e01b600052602160045260246000fd5b905250815260408051606081018252600193909301546001600160a01b0381168452600160a01b810460ff16602080860191909152600160a81b90910463ffffffff16918401919091520152612112565b8261010001518281518110610c6157634e487b7160e01b600052603260045260246000fd5b60200260200101517f8ac1440f996b8b13e31275705c447bd09a92005cf2ec131a8183afedc636f5a242604051610c989190613f97565b60405180910390a280546001600160f81b031916815560010180546001600160c81b031916905580610cc98161423b565b91505061092c565b80515b816020015181101561067a576000600560008460400151856000015181518110610d0e57634e487b7160e01b600052603260045260246000fd5b602002602001015185606001518581518110610d3a57634e487b7160e01b600052603260045260246000fd5b60200260200101518661010001518681518110610d6757634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d819392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350610e46929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152610e8d90611dbf565b6040805160c08101825282546001600160a01b038116825260ff600160a01b8204811660208401526001600160e01b0319600160a81b830460e090811b821695850195909552600160c81b830490941b9093166060830152600160e81b810483166080830152610f5092849160a0840191600160f01b909104166006811115610f2657634e487b7160e01b600052602160045260246000fd5b6006811115610f4557634e487b7160e01b600052602160045260246000fd5b905250848433612344565b8054600090600160f01b900460ff166006811115610f7e57634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f90610fb4908590600401613fa8565b60206040518083038186803b158015610fcc57600080fd5b505afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611004919061326d565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561104157600080fd5b505afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107991906136d6565b60ff169050600061108b82600a6140e9565b85549091506000906110a790600160a81b900460e01b83612468565b88610120015188815181106110cc57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff166110e191906141d9565b86549091506000906110fd90600160c81b900460e01b84612468565b87546111139190600160e81b900460ff166141d9565b9050600082116111355760405162461bcd60e51b815260040161025390613b8d565b600081116111555760405162461bcd60e51b815260040161025390613be0565b6000611161828461406b565b90506111786001600160a01b0387163330846124f7565b5050506001850180546001600160a01b03191633179055506101208601518051869081106111b657634e487b7160e01b600052603260045260246000fd5b602090810291909101015160018501805460ff60a01b1916600160a01b60ff909316929092029190911763ffffffff60a81b1916600160a81b4263ffffffff1602179055610100860151805133917f3140d73adcc923e4a0de3b1522aeec546a872bcdc06a3e25fe1209df30b954ec918890811061124457634e487b7160e01b600052603260045260246000fd5b6020026020010151886101200151888151811061127157634e487b7160e01b600052603260045260246000fd5b60200260200101514260405161128993929190613f78565b60405180910390a25050505080806112a09061423b565b915050610cd4565b6112b0612f7b565b604051806101600160405280600081526020016001815260200186815260200185815260200160006001600160401b038111156112fd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611326578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015611357578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015611388578160200160208202803683370190505b50815260200160006040519080825280602002602001820160405280156113b9578160200160208202803683370190505b508152602081018590526040810184905260600160006040519080825280602002602001820160405280156113f8578160200160208202803683370190505b50905295945050505050565b80515b81602001518110156119e15761141d828261254f565b600060056000846040015185600001518151811061144b57634e487b7160e01b600052603260045260246000fd5b60200260200101518560600151858151811061147757634e487b7160e01b600052603260045260246000fd5b60200260200101516003546040516020016114949392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350611580929091849160a0840191600160f01b90910416600681111561155957634e487b7160e01b600052602160045260246000fd5b600681111561157857634e487b7160e01b600052602160045260246000fd5b90525061272f565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff16918101919091526115c790611dbf565b60006115fd846040015184815181106115f057634e487b7160e01b600052603260045260246000fd5b60200260200101516127b7565b90506040518060c00160405280336001600160a01b031681526020018560a00151858151811061163d57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1681526020018560c00151858151811061167157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b03191681526020018560e0015185815181106116ac57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b0319168152602001826116f957856080015185815181106116ec57634e487b7160e01b600052603260045260246000fd5b60200260200101516116fc565b60015b60ff168152602001856101400151858151811061172957634e487b7160e01b600052603260045260246000fd5b6020026020010151600681111561175057634e487b7160e01b600052602160045260246000fd5b90528051835460208301516040840151606085015160808601516001600160a01b03199094166001600160a01b039095169490941760ff60a01b1916600160a01b60ff938416021763ffffffff60a81b1916600160a81b60e092831c021763ffffffff60c81b1916600160c81b9490911c939093029290921760ff60e81b1916600160e81b92909116919091021780845560a08201518491829060ff60f01b1916600160f01b83600681111561181657634e487b7160e01b600052602160045260246000fd5b0217905550905050336001600160a01b03168460600151848151811061184c57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040015186600001518151811061187c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167fc1b2f77226541f6b308379a3110d77af45464d9a161a6eb4b6cfdcd0fb2089c6846118e457876080015187815181106118d757634e487b7160e01b600052603260045260246000fd5b60200260200101516118e7565b60015b6003548960a00151898151811061190e57634e487b7160e01b600052603260045260246000fd5b60200260200101518a60c001518a8151811061193a57634e487b7160e01b600052603260045260246000fd5b60200260200101518b60e001518b8151811061196657634e487b7160e01b600052603260045260246000fd5b6020026020010151898d61014001518d8151811061199457634e487b7160e01b600052603260045260246000fd5b60200260200101516040516119af9796959493929190613fb6565b60405180910390a4600380549060006119c78361423b565b9190505550505080806119d99061423b565b915050611407565b50610686813330611e4c565b6119f5612f7b565b604051806101600160405280600081526020016001815260200189815260200188815260200187815260200186815260200185815260200184815260200160006001600160401b03811115611a5a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a83578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015611ab4578160200160208202803683370190505b50815260200192909252509695505050505050565b80515b81602001518110156119e1576000600560008460400151856000015181518110611b0657634e487b7160e01b600052603260045260246000fd5b602002602001015185606001518581518110611b3257634e487b7160e01b600052603260045260246000fd5b60200260200101518661010001518681518110611b5f57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001611b799392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350611c3e929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152611c879033426127ed565b6001810154600090611ca690600160a81b900463ffffffff16426141f8565b9050611cb28282612849565b8361010001518381518110611cd757634e487b7160e01b600052603260045260246000fd5b60200260200101517f289da9cb3ecd362ad5ae230d4daa346e68abbd8972cd9c01df54b7b1b97ab15b42604051611d0e9190613f97565b60405180910390a25060010180546001600160c81b031916905580611d328161423b565b915050611acc565b8051611d4590612afe565b602081015160ff16611d695760405162461bcd60e51b815260040161025390613c6f565b60408101516001600160e01b031916611d945760405162461bcd60e51b81526004016102539061385a565b60608101516001600160e01b0319166106865760405162461bcd60e51b815260040161025390613be0565b8051611dca90612b24565b602081015160ff1615611def5760405162461bcd60e51b815260040161025390613f10565b604081015163ffffffff16156106865760405162461bcd60e51b815260040161025390613891565b806001600160a01b031682600001516001600160a01b0316146109255760405162461bcd60e51b815260040161025390613a50565b611e7783604001518460000151815181106115f057634e487b7160e01b600052603260045260246000fd5b15611f3e576040830151835181518110611ea157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd83838660600151876000015181518110611ee157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611f07939291906137ca565b600060405180830381600087803b158015611f2157600080fd5b505af1158015611f35573d6000803e3d6000fd5b50505050610213565b611f6983604001518460000151815181106108ce57634e487b7160e01b600052603260045260246000fd5b15611ff8576040830151835181518110611f9357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316632eb2c2d68383611fc2876060015188600001518960200151612b4b565b611fd9886080015189600001518a60200151612b4b565b6040518563ffffffff1660e01b8152600401611f079493929190613772565b60405162461bcd60e51b815260040161025390613d20565b6040516301ffc9a760e01b81526000906001600160a01b038316906301ffc9a79061204690636cdb3d1360e11b90600401613812565b60206040518083038186803b15801561205e57600080fd5b505afa158015612072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190613684565b80516120a190612afe565b602081015160ff166120c55760405162461bcd60e51b815260040161025390613db7565b604081015163ffffffff166106865760405162461bcd60e51b815260040161025390613916565b6120f68282612c22565b6109255760405162461bcd60e51b815260040161025390613f47565b805160a00151600090600681111561213a57634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f90612170908590600401613fa8565b60206040518083038186803b15801561218857600080fd5b505afa15801561219c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c0919061326d565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121fd57600080fd5b505afa158015612211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223591906136d6565b60ff169050600061224782600a6140e9565b9050600061225d86600001516060015183612468565b9050600061227387600001516040015184612468565b9050600087602001516020015160ff168261228e91906141d9565b905060006122be828960ff1660068111156122b957634e487b7160e01b600052602160045260246000fd5b612c85565b905060006122cc858461406b565b9050600083116122ee5760405162461bcd60e51b815260040161025390613af0565b6122f885826141f8565b83146123165760405162461bcd60e51b8152600401610253906139ef565b8951516123389061232784846141f8565b6001600160a01b038b169190612d72565b50505050505050505050565b83516001600160a01b03828116911614156123715760405162461bcd60e51b815260040161025390613ec2565b60ff8016836101200151838151811061239a57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1611156123c35760405162461bcd60e51b8152600401610253906138e9565b600083610120015183815181106123ea57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16116124125760405162461bcd60e51b8152600401610253906139b8565b836020015160ff16836101200151838151811061243f57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1611156102a15760405162461bcd60e51b815260040161025390613ca6565b60006124748383612d91565b60f083901c61ffff60e085901c16600061249061271086614083565b905061270f8361ffff1611156124a65761270f92505b61270f8261ffff1611156124ba5761270f91505b60006124ca8661ffff86166141d9565b905060006124dc8361ffff86166141d9565b905060006124ea828461406b565b9998505050505050505050565b6102a1846323b872dd60e01b858585604051602401612518939291906137ca565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612dd4565b60008260800151828151811061257557634e487b7160e01b600052603260045260246000fd5b60200260200101511161259a5760405162461bcd60e51b815260040161025390613c42565b60ff8016826080015182815181106125c257634e487b7160e01b600052603260045260246000fd5b602002602001015111156125e85760405162461bcd60e51b8152600401610253906138e9565b60ff80168260a00151828151811061261057634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1611156126395760405162461bcd60e51b8152600401610253906138e9565b60008260a00151828151811061265f57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16116126875760405162461bcd60e51b815260040161025390613981565b60008260c0015182815181106126ad57634e487b7160e01b600052603260045260246000fd5b602002602001015160e01c63ffffffff16116126db5760405162461bcd60e51b81526004016102539061385a565b60008260e00151828151811061270157634e487b7160e01b600052603260045260246000fd5b602002602001015160e01c63ffffffff16116109255760405162461bcd60e51b815260040161025390613be0565b805161273a90612b24565b602081015160ff161561275f5760405162461bcd60e51b815260040161025390613c6f565b60408101516001600160e01b0319161561278b5760405162461bcd60e51b81526004016102539061385a565b60608101516001600160e01b031916156106865760405162461bcd60e51b815260040161025390613be0565b6040516301ffc9a760e01b81526000906001600160a01b038316906301ffc9a790612046906380ac58cd60e01b90600401613812565b816001600160a01b031683600001516001600160a01b0316146128225760405162461bcd60e51b815260040161025390613e54565b61282c8382612c22565b156102135760405162461bcd60e51b8152600401610253906138bc565b8154600090600160f01b900460ff16600681111561287757634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f906128ad908590600401613fa8565b60206040518083038186803b1580156128c557600080fd5b505afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd919061326d565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561293a57600080fd5b505afa15801561294e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297291906136d6565b60ff169050600061298482600a6140e9565b86549091506000906129a090600160c81b900460e01b83612468565b87549091506000906129bc90600160a81b900460e01b84612468565b60018901549091506000906129db90600160a01b900460ff16836141d9565b90506000620151806129ed848b6141d9565b6129f79190614083565b905060008211612a195760405162461bcd60e51b815260040161025390613aad565b60008111612a395760405162461bcd60e51b815260040161025390613a7d565b80821015612a595760405162461bcd60e51b81526004016102539061393c565b6000612a6582846141f8565b9050828110612a865760405162461bcd60e51b815260040161025390613c0b565b8a54600090612aa0908490600160f01b900460ff16612c85565b9050612aac81846141f8565b9250612ab8868361406b565b8c54909250612ad4906001600160a01b038b8116911685612d72565b60018c0154612af0906001600160a01b038b8116911684612d72565b505050505050505050505050565b6001600160a01b0381166106865760405162461bcd60e51b815260040161025390613d50565b6001600160a01b038116156106865760405162461bcd60e51b815260040161025390613e1d565b606083516001600160401b03811115612b7457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b9d578160200160208202803683370190505b509050825b82811015612c1a57848181518110612bca57634e487b7160e01b600052603260045260246000fd5b6020026020010151828583612bdf91906141f8565b81518110612bfd57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612c128161423b565b915050612ba2565b509392505050565b6000826040015163ffffffff168211612c4d5760405162461bcd60e51b815260040161025390613d80565b6020830151612c629060ff16620151806141b7565b62ffffff16836040015163ffffffff1683612c7d91906141f8565b119392505050565b600060045483612c9591906141d9565b9050612ca361271082614083565b90506000826006811115612cc757634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f90612cfd908590600401613fa8565b60206040518083038186803b158015612d1557600080fd5b505afa158015612d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4d919061326d565b600254909150612d6a906001600160a01b03808416911685612d72565b505092915050565b6102138363a9059cbb60e01b84846040516024016125189291906137ee565b60e082901c612db25760405162461bcd60e51b815260040161025390613bb9565b6127108110156109255760405162461bcd60e51b815260040161025390613b20565b6000612e29826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e639092919063ffffffff16565b8051909150156102135780806020019051810190612e479190613684565b6102135760405162461bcd60e51b815260040161025390613e78565b6060612e728484600085612e7c565b90505b9392505050565b606082471015612e9e5760405162461bcd60e51b815260040161025390613b47565b612ea785612f3c565b612ec35760405162461bcd60e51b815260040161025390613de6565b600080866001600160a01b03168587604051612edf9190613756565b60006040518083038185875af1925050503d8060008114612f1c576040519150601f19603f3d011682016040523d82523d6000602084013e612f21565b606091505b5091509150612f31828286612f42565b979650505050505050565b3b151590565b60608315612f51575081612e75565b825115612f615782518084602001fd5b8160405162461bcd60e51b81526004016102539190613827565b60405180610160016040528060008152602001600081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b600082601f830112612fe5578081fd5b81356020612ffa612ff583614048565b61401f565b8281528181019085830183850287018401881015613016578586fd5b855b8581101561303d57813561302b81614282565b84529284019290840190600101613018565b5090979650505050505050565b600082601f83011261305a578081fd5b8135602061306a612ff583614048565b8281528181019085830183850287018401881015613086578586fd5b855b8581101561303d5761309982613216565b84529284019290840190600101613088565b600082601f8301126130bb578081fd5b813560206130cb612ff583614048565b82815281810190858301838502870184018810156130e7578586fd5b855b8581101561303d578135600781106130ff578788fd5b845292840192908401906001016130e9565b60008083601f840112613122578182fd5b5081356001600160401b03811115613138578182fd5b602083019150836020808302850101111561315257600080fd5b9250929050565b600082601f830112613169578081fd5b81356020613179612ff583614048565b8281528181019085830183850287018401881015613195578586fd5b855b8581101561303d57813584529284019290840190600101613197565b600082601f8301126131c3578081fd5b813560206131d3612ff583614048565b82815281810190858301838502870184018810156131ef578586fd5b855b8581101561303d57813561320481614297565b845292840192908401906001016131f1565b80356001600160e01b0319811681146101f857600080fd5b60008083601f84011261323f578182fd5b5081356001600160401b03811115613255578182fd5b60208301915083602082850101111561315257600080fd5b60006020828403121561327e578081fd5b8151612e7581614282565b60006020828403121561329a578081fd5b8135612e7581614282565b60008060008060008060008060a0898b0312156132c0578384fd5b88356132cb81614282565b975060208901356132db81614282565b965060408901356001600160401b03808211156132f6578586fd5b6133028c838d01613111565b909850965060608b013591508082111561331a578586fd5b6133268c838d01613111565b909650945060808b013591508082111561333e578384fd5b5061334b8b828c0161322e565b999c989b5096995094979396929594505050565b600080600080600060808688031215613376578283fd5b853561338181614282565b9450602086013561339181614282565b93506040860135925060608601356001600160401b038111156133b2578182fd5b6133be8882890161322e565b969995985093965092949392505050565b60008060008060008060a087890312156133e7578384fd5b86356133f281614282565b9550602087013561340281614282565b9450604087013593506060870135925060808701356001600160401b0381111561342a578283fd5b61343689828a0161322e565b979a9699509497509295939492505050565b60008060006060848603121561345c578081fd5b83356001600160401b0380821115613472578283fd5b61347e87838801612fd5565b94506020860135915080821115613493578283fd5b61349f87838801613159565b935060408601359150808211156134b4578283fd5b506134c186828701613159565b9150509250925092565b600080600080608085870312156134e0578182fd5b84356001600160401b03808211156134f6578384fd5b61350288838901612fd5565b95506020870135915080821115613517578384fd5b61352388838901613159565b94506040870135915080821115613538578384fd5b61354488838901613159565b93506060870135915080821115613559578283fd5b50613566878288016131b3565b91505092959194509250565b600080600080600080600060e0888a03121561358c578081fd5b87356001600160401b03808211156135a2578283fd5b6135ae8b838c01612fd5565b985060208a01359150808211156135c3578283fd5b6135cf8b838c01613159565b975060408a01359150808211156135e4578283fd5b6135f08b838c01613159565b965060608a0135915080821115613605578283fd5b6136118b838c016131b3565b955060808a0135915080821115613626578283fd5b6136328b838c0161304a565b945060a08a0135915080821115613647578283fd5b6136538b838c0161304a565b935060c08a0135915080821115613668578283fd5b506136758a828b016130ab565b91505092959891949750929550565b600060208284031215613695578081fd5b81518015158114612e75578182fd5b6000602082840312156136b5578081fd5b612e7582613216565b6000602082840312156136cf578081fd5b5035919050565b6000602082840312156136e7578081fd5b8151612e7581614297565b6000815180845260208085019450808401835b8381101561372157815187529582019590820190600101613705565b509495945050505050565b60609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b6000825161376881846020870161420f565b9190910192915050565b6001600160a01b0385811682528416602082015260a06040820181905260009061379e908301856136f2565b82810360608401526137b081856136f2565b838103608090940193909352508152602001949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160e01b031991909116815260200190565b600060208252825180602084015261384681604085016020870161420f565b601f01601f19169190910160400192915050565b60208082526018908201527f6461696c792072656e74207072696365206973207a65726f0000000000000000604082015260600190565b6020808252601190820152707761732072656e746564206265666f726560781b604082015260600190565b602080825260139082015272697320706173742072657475726e206461746560681b604082015260600190565b6020808252601390820152720c6c2dcdcdee840caf0c6cacac840ead2dce87606b1b604082015260600190565b6020808252600c908201526b1b995d995c881c995b9d195960a21b604082015260600190565b60208082526025908201527f6c656e64657220726563656976696e67206d6f7265207468616e2072656e74656040820152641c881c1b5d60da1b606082015260800190565b6020808252601d908201527f6d757374206265206174206c65617374206f6e6520646179206c656e64000000604082015260600190565b6020808252601e908201527f73686f756c642072656e7420666f72206174206c656173742061206461790000604082015260600190565b6020808252601b908201527f6d617852656e745061796d656e7420697320696e636f72726563740000000000604082015260600190565b60208082526010908201526f34b73b30b634b21037333a39903632b760811b604082015260600190565b6020808252601390820152721bdb9b1e481b195b99195c88185b1b1bddd959606a1b604082015260600190565b6020808252601690820152756c656e646572207061796d656e74206973207a65726f60501b604082015260600190565b60208082526023908201527f746f74616c207061796d656e7420776f20636f6c6c61746572616c206973207a60408201526265726f60e81b606082015260800190565b6020808252601690820152756d617852656e745061796d656e74206973207a65726f60501b604082015260600190565b6020808252600d908201526c696e76616c6964207363616c6560981b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526012908201527172656e74207072696365206973207a65726f60701b604082015260600190565b6020808252600d908201526c696e76616c696420707269636560981b604082015260600190565b6020808252601190820152706e6674207072696365206973207a65726f60781b604082015260600190565b6020808252601b908201527f756e646572666c6f77206973737565732070726576656e74696f6e0000000000604082015260600190565b6020808252601390820152721a5b9d985b1a59081b195b9908185b5bdd5b9d606a1b604082015260600190565b60208082526019908201527f6d61782072656e74206475726174696f6e206973207a65726f00000000000000604082015260600190565b6020808252601a908201527f6d61782072656e74206475726174696f6e206578636565646564000000000000604082015260600190565b60208082526023908201527f63616e6e6f742062652074616b696e67203130302070637420666565206d61646040820152621b185960ea1b606082015260800190565b602080825260169082015275756e737570706f7274656420746f6b656e207479706560501b604082015260600190565b602080825260169082015275616464722069732061207a65726f206164647265737360501b604082015260600190565b6020808252601a908201527f5f6e6f7720206c74205f72656e74696e672e72656e7465644174000000000000604082015260600190565b60208082526015908201527472656e74206475726174696f6e206973207a65726f60581b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601a908201527f61646472206973206e6f742061207a65726f2061646472657373000000000000604082015260600190565b6020808252600a90820152693737ba103932b73a32b960b11b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526011908201527018d85b9d081c995b9d081bdddb881b999d607a1b604082015260600190565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b60208082526019908201527f72656e74206475726174696f6e206973206e6f74207a65726f00000000000000604082015260600190565b6020808252600e908201526d18d85b9d0818db185a5b481e595d60921b604082015260600190565b90815260200190565b92835260ff91909116602083015263ffffffff16604082015260600190565b63ffffffff91909116815260200190565b60ff91909116815260200190565b60ff888116825260208201889052861660408201526001600160e01b031985811660608301528416608082015282151560a082015260e081016007831061400d57634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b6040518181016001600160401b03811182821017156140405761404061426c565b604052919050565b60006001600160401b038211156140615761406161426c565b5060209081020190565b6000821982111561407e5761407e614256565b500190565b60008261409e57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116140b557506140e0565b8187048211156140c7576140c7614256565b808616156140d457918102915b9490941c9380026140a6565b94509492505050565b6000612e75600019848460008261410257506001612e75565b8161410f57506000612e75565b8160018114614125576002811461412f5761415c565b6001915050612e75565b60ff84111561414057614140614256565b6001841b91508482111561415657614156614256565b50612e75565b5060208310610133831016604e8410600b841016171561418f575081810a8381111561418a5761418a614256565b612e75565b61419c84848460016140a3565b8086048211156141ae576141ae614256565b02949350505050565b600062ffffff808316818516818304811182151516156141ae576141ae614256565b60008160001904831182151516156141f3576141f3614256565b500290565b60008282101561420a5761420a614256565b500390565b60005b8381101561422a578181015183820152602001614212565b838111156102a15750506000910152565b600060001982141561424f5761424f614256565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461068657600080fd5b60ff8116811461068657600080fdfea26469706673582212201236a7540a05e343f950bfcf762a168fa09dde35c404625a0640f91cb37daa5e64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806376774ea31161007157806376774ea314610150578063bc197c8114610163578063bf2b23ea14610176578063e50364b21461018b578063f23a6e611461019e578063fb158519146101b1576100b4565b806301ffc9a7146100b9578063098130df146100e2578063150b7a02146100f75780631c31f7101461011757806359fe66e41461012a5780635de07ca31461013d575b600080fd5b6100cc6100c73660046136a4565b6101c4565b6040516100d99190613807565b60405180910390f35b6100f56100f0366004613448565b6101fd565b005b61010a61010536600461335f565b610218565b6040516100d99190613812565b6100f5610125366004613289565b610229565b6100f5610138366004613448565b61027e565b6100f561014b3660046134cb565b61028f565b6100f561015e3660046136be565b6102a7565b61010a6101713660046132a5565b6102f7565b61017e61030b565b6040516100d99190613f6f565b6100f5610199366004613572565b610311565b61010a6101ac3660046133cf565b61032f565b6100f56101bf366004613448565b610341565b60006001600160e01b03198216630a85bd0160e11b14806101f557506001600160e01b03198216630271189760e51b145b90505b919050565b61021361035261020e858585610689565b6107d3565b505050565b63785cf2dd60e11b95945050505050565b6001546001600160a01b0316331461025c5760405162461bcd60e51b815260040161025390613eed565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61021361092961020e858585610689565b6102a1610cd161020e868686866112a8565b50505050565b6001546001600160a01b031633146102d15760405162461bcd60e51b815260040161025390613eed565b61271081106102f25760405162461bcd60e51b815260040161025390613cdd565b600455565b63bc197c8160e01b98975050505050505050565b60045481565b61032661140461020e898989898989896119ed565b50505050505050565b63f23a6e6160e01b9695505050505050565b610213611ac961020e858585610689565b80515b816020015181101561067a57600060056000846040015185600001518151811061038f57634e487b7160e01b600052603260045260246000fd5b6020026020010151856060015185815181106103bb57634e487b7160e01b600052603260045260246000fd5b602002602001015186610100015186815181106103e857634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016104029392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b8404831660808201529093506104ee929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b60068111156104e657634e487b7160e01b600052602160045260246000fd5b905250611d3a565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff169181019190915261053590611dbf565b6040805160c08101825282546001600160a01b038116825260ff600160a01b8204811660208401526001600160e01b0319600160a81b830460e090811b821695850195909552600160c81b830490941b9093166060830152600160e81b8104831660808301526105f692849160a0840191600160f01b9091041660068111156105ce57634e487b7160e01b600052602160045260246000fd5b60068111156105ed57634e487b7160e01b600052602160045260246000fd5b90525033611e17565b826101000151828151811061061b57634e487b7160e01b600052603260045260246000fd5b60200260200101517f61bcecd87c002ae006d9d8c760291b4f3646fa6109590b4b3ea93084aae4bb6a426040516106529190613f97565b60405180910390a280546001600160f81b0319169055806106728161423b565b915050610355565b50610686813033611e4c565b50565b610691612f7b565b604051806101600160405280600081526020016001815260200185815260200184815260200160006001600160401b038111156106de57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610707578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610738578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610769578160200160208202803683370190505b508152602001600060405190808252806020026020018201604052801561079a578160200160208202803683370190505b50815260208082019490945260408051600080825281870183528284019190915281519081529485019052606001929092525092915050565b6000816040015151116107f85760405162461bcd60e51b815260040161025390613a26565b6002816040015151101561081857610813818363ffffffff16565b610925565b8060400151518160200151101561091857806040015181602001518151811061085157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316816040015182600001518151811061088a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161480156108db57506108db81604001518260200151815181106108ce57634e487b7160e01b600052603260045260246000fd5b6020026020010151612010565b156108f857602081018051906108f08261423b565b905250610818565b610905818363ffffffff16565b602081018051808352906108f08261423b565b610925818363ffffffff16565b5050565b80515b816020015181101561092557600060056000846040015185600001518151811061096657634e487b7160e01b600052603260045260246000fd5b60200260200101518560600151858151811061099257634e487b7160e01b600052603260045260246000fd5b602002602001015186610100015186815181106109bf57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016109d99392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350610a9e929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152610ae590612096565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152610b2d90426120ec565b604080516101008101825282546001600160a01b03811692820192835260ff600160a01b8204811660608401526001600160e01b0319600160a81b830460e090811b82166080860152600160c81b8404811b90911660a0850152600160e81b8304821660c0850152610c3c94869385939192859290850191600160f01b9004166006811115610bcc57634e487b7160e01b600052602160045260246000fd5b6006811115610beb57634e487b7160e01b600052602160045260246000fd5b905250815260408051606081018252600193909301546001600160a01b0381168452600160a01b810460ff16602080860191909152600160a81b90910463ffffffff16918401919091520152612112565b8261010001518281518110610c6157634e487b7160e01b600052603260045260246000fd5b60200260200101517f8ac1440f996b8b13e31275705c447bd09a92005cf2ec131a8183afedc636f5a242604051610c989190613f97565b60405180910390a280546001600160f81b031916815560010180546001600160c81b031916905580610cc98161423b565b91505061092c565b80515b816020015181101561067a576000600560008460400151856000015181518110610d0e57634e487b7160e01b600052603260045260246000fd5b602002602001015185606001518581518110610d3a57634e487b7160e01b600052603260045260246000fd5b60200260200101518661010001518681518110610d6757634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d819392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350610e46929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152610e8d90611dbf565b6040805160c08101825282546001600160a01b038116825260ff600160a01b8204811660208401526001600160e01b0319600160a81b830460e090811b821695850195909552600160c81b830490941b9093166060830152600160e81b810483166080830152610f5092849160a0840191600160f01b909104166006811115610f2657634e487b7160e01b600052602160045260246000fd5b6006811115610f4557634e487b7160e01b600052602160045260246000fd5b905250848433612344565b8054600090600160f01b900460ff166006811115610f7e57634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f90610fb4908590600401613fa8565b60206040518083038186803b158015610fcc57600080fd5b505afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611004919061326d565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561104157600080fd5b505afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107991906136d6565b60ff169050600061108b82600a6140e9565b85549091506000906110a790600160a81b900460e01b83612468565b88610120015188815181106110cc57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff166110e191906141d9565b86549091506000906110fd90600160c81b900460e01b84612468565b87546111139190600160e81b900460ff166141d9565b9050600082116111355760405162461bcd60e51b815260040161025390613b8d565b600081116111555760405162461bcd60e51b815260040161025390613be0565b6000611161828461406b565b90506111786001600160a01b0387163330846124f7565b5050506001850180546001600160a01b03191633179055506101208601518051869081106111b657634e487b7160e01b600052603260045260246000fd5b602090810291909101015160018501805460ff60a01b1916600160a01b60ff909316929092029190911763ffffffff60a81b1916600160a81b4263ffffffff1602179055610100860151805133917f3140d73adcc923e4a0de3b1522aeec546a872bcdc06a3e25fe1209df30b954ec918890811061124457634e487b7160e01b600052603260045260246000fd5b6020026020010151886101200151888151811061127157634e487b7160e01b600052603260045260246000fd5b60200260200101514260405161128993929190613f78565b60405180910390a25050505080806112a09061423b565b915050610cd4565b6112b0612f7b565b604051806101600160405280600081526020016001815260200186815260200185815260200160006001600160401b038111156112fd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611326578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015611357578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015611388578160200160208202803683370190505b50815260200160006040519080825280602002602001820160405280156113b9578160200160208202803683370190505b508152602081018590526040810184905260600160006040519080825280602002602001820160405280156113f8578160200160208202803683370190505b50905295945050505050565b80515b81602001518110156119e15761141d828261254f565b600060056000846040015185600001518151811061144b57634e487b7160e01b600052603260045260246000fd5b60200260200101518560600151858151811061147757634e487b7160e01b600052603260045260246000fd5b60200260200101516003546040516020016114949392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350611580929091849160a0840191600160f01b90910416600681111561155957634e487b7160e01b600052602160045260246000fd5b600681111561157857634e487b7160e01b600052602160045260246000fd5b90525061272f565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff16918101919091526115c790611dbf565b60006115fd846040015184815181106115f057634e487b7160e01b600052603260045260246000fd5b60200260200101516127b7565b90506040518060c00160405280336001600160a01b031681526020018560a00151858151811061163d57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1681526020018560c00151858151811061167157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b03191681526020018560e0015185815181106116ac57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160e01b0319168152602001826116f957856080015185815181106116ec57634e487b7160e01b600052603260045260246000fd5b60200260200101516116fc565b60015b60ff168152602001856101400151858151811061172957634e487b7160e01b600052603260045260246000fd5b6020026020010151600681111561175057634e487b7160e01b600052602160045260246000fd5b90528051835460208301516040840151606085015160808601516001600160a01b03199094166001600160a01b039095169490941760ff60a01b1916600160a01b60ff938416021763ffffffff60a81b1916600160a81b60e092831c021763ffffffff60c81b1916600160c81b9490911c939093029290921760ff60e81b1916600160e81b92909116919091021780845560a08201518491829060ff60f01b1916600160f01b83600681111561181657634e487b7160e01b600052602160045260246000fd5b0217905550905050336001600160a01b03168460600151848151811061184c57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040015186600001518151811061187c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167fc1b2f77226541f6b308379a3110d77af45464d9a161a6eb4b6cfdcd0fb2089c6846118e457876080015187815181106118d757634e487b7160e01b600052603260045260246000fd5b60200260200101516118e7565b60015b6003548960a00151898151811061190e57634e487b7160e01b600052603260045260246000fd5b60200260200101518a60c001518a8151811061193a57634e487b7160e01b600052603260045260246000fd5b60200260200101518b60e001518b8151811061196657634e487b7160e01b600052603260045260246000fd5b6020026020010151898d61014001518d8151811061199457634e487b7160e01b600052603260045260246000fd5b60200260200101516040516119af9796959493929190613fb6565b60405180910390a4600380549060006119c78361423b565b9190505550505080806119d99061423b565b915050611407565b50610686813330611e4c565b6119f5612f7b565b604051806101600160405280600081526020016001815260200189815260200188815260200187815260200186815260200185815260200184815260200160006001600160401b03811115611a5a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a83578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015611ab4578160200160208202803683370190505b50815260200192909252509695505050505050565b80515b81602001518110156119e1576000600560008460400151856000015181518110611b0657634e487b7160e01b600052603260045260246000fd5b602002602001015185606001518581518110611b3257634e487b7160e01b600052603260045260246000fd5b60200260200101518661010001518681518110611b5f57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001611b799392919061372c565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350611c3e929091849160a0840191600160f01b9091041660068111156104c757634e487b7160e01b600052602160045260246000fd5b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152611c879033426127ed565b6001810154600090611ca690600160a81b900463ffffffff16426141f8565b9050611cb28282612849565b8361010001518381518110611cd757634e487b7160e01b600052603260045260246000fd5b60200260200101517f289da9cb3ecd362ad5ae230d4daa346e68abbd8972cd9c01df54b7b1b97ab15b42604051611d0e9190613f97565b60405180910390a25060010180546001600160c81b031916905580611d328161423b565b915050611acc565b8051611d4590612afe565b602081015160ff16611d695760405162461bcd60e51b815260040161025390613c6f565b60408101516001600160e01b031916611d945760405162461bcd60e51b81526004016102539061385a565b60608101516001600160e01b0319166106865760405162461bcd60e51b815260040161025390613be0565b8051611dca90612b24565b602081015160ff1615611def5760405162461bcd60e51b815260040161025390613f10565b604081015163ffffffff16156106865760405162461bcd60e51b815260040161025390613891565b806001600160a01b031682600001516001600160a01b0316146109255760405162461bcd60e51b815260040161025390613a50565b611e7783604001518460000151815181106115f057634e487b7160e01b600052603260045260246000fd5b15611f3e576040830151835181518110611ea157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd83838660600151876000015181518110611ee157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611f07939291906137ca565b600060405180830381600087803b158015611f2157600080fd5b505af1158015611f35573d6000803e3d6000fd5b50505050610213565b611f6983604001518460000151815181106108ce57634e487b7160e01b600052603260045260246000fd5b15611ff8576040830151835181518110611f9357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316632eb2c2d68383611fc2876060015188600001518960200151612b4b565b611fd9886080015189600001518a60200151612b4b565b6040518563ffffffff1660e01b8152600401611f079493929190613772565b60405162461bcd60e51b815260040161025390613d20565b6040516301ffc9a760e01b81526000906001600160a01b038316906301ffc9a79061204690636cdb3d1360e11b90600401613812565b60206040518083038186803b15801561205e57600080fd5b505afa158015612072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190613684565b80516120a190612afe565b602081015160ff166120c55760405162461bcd60e51b815260040161025390613db7565b604081015163ffffffff166106865760405162461bcd60e51b815260040161025390613916565b6120f68282612c22565b6109255760405162461bcd60e51b815260040161025390613f47565b805160a00151600090600681111561213a57634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f90612170908590600401613fa8565b60206040518083038186803b15801561218857600080fd5b505afa15801561219c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c0919061326d565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121fd57600080fd5b505afa158015612211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223591906136d6565b60ff169050600061224782600a6140e9565b9050600061225d86600001516060015183612468565b9050600061227387600001516040015184612468565b9050600087602001516020015160ff168261228e91906141d9565b905060006122be828960ff1660068111156122b957634e487b7160e01b600052602160045260246000fd5b612c85565b905060006122cc858461406b565b9050600083116122ee5760405162461bcd60e51b815260040161025390613af0565b6122f885826141f8565b83146123165760405162461bcd60e51b8152600401610253906139ef565b8951516123389061232784846141f8565b6001600160a01b038b169190612d72565b50505050505050505050565b83516001600160a01b03828116911614156123715760405162461bcd60e51b815260040161025390613ec2565b60ff8016836101200151838151811061239a57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1611156123c35760405162461bcd60e51b8152600401610253906138e9565b600083610120015183815181106123ea57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16116124125760405162461bcd60e51b8152600401610253906139b8565b836020015160ff16836101200151838151811061243f57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1611156102a15760405162461bcd60e51b815260040161025390613ca6565b60006124748383612d91565b60f083901c61ffff60e085901c16600061249061271086614083565b905061270f8361ffff1611156124a65761270f92505b61270f8261ffff1611156124ba5761270f91505b60006124ca8661ffff86166141d9565b905060006124dc8361ffff86166141d9565b905060006124ea828461406b565b9998505050505050505050565b6102a1846323b872dd60e01b858585604051602401612518939291906137ca565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612dd4565b60008260800151828151811061257557634e487b7160e01b600052603260045260246000fd5b60200260200101511161259a5760405162461bcd60e51b815260040161025390613c42565b60ff8016826080015182815181106125c257634e487b7160e01b600052603260045260246000fd5b602002602001015111156125e85760405162461bcd60e51b8152600401610253906138e9565b60ff80168260a00151828151811061261057634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1611156126395760405162461bcd60e51b8152600401610253906138e9565b60008260a00151828151811061265f57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16116126875760405162461bcd60e51b815260040161025390613981565b60008260c0015182815181106126ad57634e487b7160e01b600052603260045260246000fd5b602002602001015160e01c63ffffffff16116126db5760405162461bcd60e51b81526004016102539061385a565b60008260e00151828151811061270157634e487b7160e01b600052603260045260246000fd5b602002602001015160e01c63ffffffff16116109255760405162461bcd60e51b815260040161025390613be0565b805161273a90612b24565b602081015160ff161561275f5760405162461bcd60e51b815260040161025390613c6f565b60408101516001600160e01b0319161561278b5760405162461bcd60e51b81526004016102539061385a565b60608101516001600160e01b031916156106865760405162461bcd60e51b815260040161025390613be0565b6040516301ffc9a760e01b81526000906001600160a01b038316906301ffc9a790612046906380ac58cd60e01b90600401613812565b816001600160a01b031683600001516001600160a01b0316146128225760405162461bcd60e51b815260040161025390613e54565b61282c8382612c22565b156102135760405162461bcd60e51b8152600401610253906138bc565b8154600090600160f01b900460ff16600681111561287757634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f906128ad908590600401613fa8565b60206040518083038186803b1580156128c557600080fd5b505afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd919061326d565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561293a57600080fd5b505afa15801561294e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297291906136d6565b60ff169050600061298482600a6140e9565b86549091506000906129a090600160c81b900460e01b83612468565b87549091506000906129bc90600160a81b900460e01b84612468565b60018901549091506000906129db90600160a01b900460ff16836141d9565b90506000620151806129ed848b6141d9565b6129f79190614083565b905060008211612a195760405162461bcd60e51b815260040161025390613aad565b60008111612a395760405162461bcd60e51b815260040161025390613a7d565b80821015612a595760405162461bcd60e51b81526004016102539061393c565b6000612a6582846141f8565b9050828110612a865760405162461bcd60e51b815260040161025390613c0b565b8a54600090612aa0908490600160f01b900460ff16612c85565b9050612aac81846141f8565b9250612ab8868361406b565b8c54909250612ad4906001600160a01b038b8116911685612d72565b60018c0154612af0906001600160a01b038b8116911684612d72565b505050505050505050505050565b6001600160a01b0381166106865760405162461bcd60e51b815260040161025390613d50565b6001600160a01b038116156106865760405162461bcd60e51b815260040161025390613e1d565b606083516001600160401b03811115612b7457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b9d578160200160208202803683370190505b509050825b82811015612c1a57848181518110612bca57634e487b7160e01b600052603260045260246000fd5b6020026020010151828583612bdf91906141f8565b81518110612bfd57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612c128161423b565b915050612ba2565b509392505050565b6000826040015163ffffffff168211612c4d5760405162461bcd60e51b815260040161025390613d80565b6020830151612c629060ff16620151806141b7565b62ffffff16836040015163ffffffff1683612c7d91906141f8565b119392505050565b600060045483612c9591906141d9565b9050612ca361271082614083565b90506000826006811115612cc757634e487b7160e01b600052602160045260246000fd5b6000805460405163c6ee427f60e01b815292935090916001600160a01b039091169063c6ee427f90612cfd908590600401613fa8565b60206040518083038186803b158015612d1557600080fd5b505afa158015612d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4d919061326d565b600254909150612d6a906001600160a01b03808416911685612d72565b505092915050565b6102138363a9059cbb60e01b84846040516024016125189291906137ee565b60e082901c612db25760405162461bcd60e51b815260040161025390613bb9565b6127108110156109255760405162461bcd60e51b815260040161025390613b20565b6000612e29826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e639092919063ffffffff16565b8051909150156102135780806020019051810190612e479190613684565b6102135760405162461bcd60e51b815260040161025390613e78565b6060612e728484600085612e7c565b90505b9392505050565b606082471015612e9e5760405162461bcd60e51b815260040161025390613b47565b612ea785612f3c565b612ec35760405162461bcd60e51b815260040161025390613de6565b600080866001600160a01b03168587604051612edf9190613756565b60006040518083038185875af1925050503d8060008114612f1c576040519150601f19603f3d011682016040523d82523d6000602084013e612f21565b606091505b5091509150612f31828286612f42565b979650505050505050565b3b151590565b60608315612f51575081612e75565b825115612f615782518084602001fd5b8160405162461bcd60e51b81526004016102539190613827565b60405180610160016040528060008152602001600081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b600082601f830112612fe5578081fd5b81356020612ffa612ff583614048565b61401f565b8281528181019085830183850287018401881015613016578586fd5b855b8581101561303d57813561302b81614282565b84529284019290840190600101613018565b5090979650505050505050565b600082601f83011261305a578081fd5b8135602061306a612ff583614048565b8281528181019085830183850287018401881015613086578586fd5b855b8581101561303d5761309982613216565b84529284019290840190600101613088565b600082601f8301126130bb578081fd5b813560206130cb612ff583614048565b82815281810190858301838502870184018810156130e7578586fd5b855b8581101561303d578135600781106130ff578788fd5b845292840192908401906001016130e9565b60008083601f840112613122578182fd5b5081356001600160401b03811115613138578182fd5b602083019150836020808302850101111561315257600080fd5b9250929050565b600082601f830112613169578081fd5b81356020613179612ff583614048565b8281528181019085830183850287018401881015613195578586fd5b855b8581101561303d57813584529284019290840190600101613197565b600082601f8301126131c3578081fd5b813560206131d3612ff583614048565b82815281810190858301838502870184018810156131ef578586fd5b855b8581101561303d57813561320481614297565b845292840192908401906001016131f1565b80356001600160e01b0319811681146101f857600080fd5b60008083601f84011261323f578182fd5b5081356001600160401b03811115613255578182fd5b60208301915083602082850101111561315257600080fd5b60006020828403121561327e578081fd5b8151612e7581614282565b60006020828403121561329a578081fd5b8135612e7581614282565b60008060008060008060008060a0898b0312156132c0578384fd5b88356132cb81614282565b975060208901356132db81614282565b965060408901356001600160401b03808211156132f6578586fd5b6133028c838d01613111565b909850965060608b013591508082111561331a578586fd5b6133268c838d01613111565b909650945060808b013591508082111561333e578384fd5b5061334b8b828c0161322e565b999c989b5096995094979396929594505050565b600080600080600060808688031215613376578283fd5b853561338181614282565b9450602086013561339181614282565b93506040860135925060608601356001600160401b038111156133b2578182fd5b6133be8882890161322e565b969995985093965092949392505050565b60008060008060008060a087890312156133e7578384fd5b86356133f281614282565b9550602087013561340281614282565b9450604087013593506060870135925060808701356001600160401b0381111561342a578283fd5b61343689828a0161322e565b979a9699509497509295939492505050565b60008060006060848603121561345c578081fd5b83356001600160401b0380821115613472578283fd5b61347e87838801612fd5565b94506020860135915080821115613493578283fd5b61349f87838801613159565b935060408601359150808211156134b4578283fd5b506134c186828701613159565b9150509250925092565b600080600080608085870312156134e0578182fd5b84356001600160401b03808211156134f6578384fd5b61350288838901612fd5565b95506020870135915080821115613517578384fd5b61352388838901613159565b94506040870135915080821115613538578384fd5b61354488838901613159565b93506060870135915080821115613559578283fd5b50613566878288016131b3565b91505092959194509250565b600080600080600080600060e0888a03121561358c578081fd5b87356001600160401b03808211156135a2578283fd5b6135ae8b838c01612fd5565b985060208a01359150808211156135c3578283fd5b6135cf8b838c01613159565b975060408a01359150808211156135e4578283fd5b6135f08b838c01613159565b965060608a0135915080821115613605578283fd5b6136118b838c016131b3565b955060808a0135915080821115613626578283fd5b6136328b838c0161304a565b945060a08a0135915080821115613647578283fd5b6136538b838c0161304a565b935060c08a0135915080821115613668578283fd5b506136758a828b016130ab565b91505092959891949750929550565b600060208284031215613695578081fd5b81518015158114612e75578182fd5b6000602082840312156136b5578081fd5b612e7582613216565b6000602082840312156136cf578081fd5b5035919050565b6000602082840312156136e7578081fd5b8151612e7581614297565b6000815180845260208085019450808401835b8381101561372157815187529582019590820190600101613705565b509495945050505050565b60609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b6000825161376881846020870161420f565b9190910192915050565b6001600160a01b0385811682528416602082015260a06040820181905260009061379e908301856136f2565b82810360608401526137b081856136f2565b838103608090940193909352508152602001949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160e01b031991909116815260200190565b600060208252825180602084015261384681604085016020870161420f565b601f01601f19169190910160400192915050565b60208082526018908201527f6461696c792072656e74207072696365206973207a65726f0000000000000000604082015260600190565b6020808252601190820152707761732072656e746564206265666f726560781b604082015260600190565b602080825260139082015272697320706173742072657475726e206461746560681b604082015260600190565b6020808252601390820152720c6c2dcdcdee840caf0c6cacac840ead2dce87606b1b604082015260600190565b6020808252600c908201526b1b995d995c881c995b9d195960a21b604082015260600190565b60208082526025908201527f6c656e64657220726563656976696e67206d6f7265207468616e2072656e74656040820152641c881c1b5d60da1b606082015260800190565b6020808252601d908201527f6d757374206265206174206c65617374206f6e6520646179206c656e64000000604082015260600190565b6020808252601e908201527f73686f756c642072656e7420666f72206174206c656173742061206461790000604082015260600190565b6020808252601b908201527f6d617852656e745061796d656e7420697320696e636f72726563740000000000604082015260600190565b60208082526010908201526f34b73b30b634b21037333a39903632b760811b604082015260600190565b6020808252601390820152721bdb9b1e481b195b99195c88185b1b1bddd959606a1b604082015260600190565b6020808252601690820152756c656e646572207061796d656e74206973207a65726f60501b604082015260600190565b60208082526023908201527f746f74616c207061796d656e7420776f20636f6c6c61746572616c206973207a60408201526265726f60e81b606082015260800190565b6020808252601690820152756d617852656e745061796d656e74206973207a65726f60501b604082015260600190565b6020808252600d908201526c696e76616c6964207363616c6560981b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526012908201527172656e74207072696365206973207a65726f60701b604082015260600190565b6020808252600d908201526c696e76616c696420707269636560981b604082015260600190565b6020808252601190820152706e6674207072696365206973207a65726f60781b604082015260600190565b6020808252601b908201527f756e646572666c6f77206973737565732070726576656e74696f6e0000000000604082015260600190565b6020808252601390820152721a5b9d985b1a59081b195b9908185b5bdd5b9d606a1b604082015260600190565b60208082526019908201527f6d61782072656e74206475726174696f6e206973207a65726f00000000000000604082015260600190565b6020808252601a908201527f6d61782072656e74206475726174696f6e206578636565646564000000000000604082015260600190565b60208082526023908201527f63616e6e6f742062652074616b696e67203130302070637420666565206d61646040820152621b185960ea1b606082015260800190565b602080825260169082015275756e737570706f7274656420746f6b656e207479706560501b604082015260600190565b602080825260169082015275616464722069732061207a65726f206164647265737360501b604082015260600190565b6020808252601a908201527f5f6e6f7720206c74205f72656e74696e672e72656e7465644174000000000000604082015260600190565b60208082526015908201527472656e74206475726174696f6e206973207a65726f60581b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601a908201527f61646472206973206e6f742061207a65726f2061646472657373000000000000604082015260600190565b6020808252600a90820152693737ba103932b73a32b960b11b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526011908201527018d85b9d081c995b9d081bdddb881b999d607a1b604082015260600190565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b60208082526019908201527f72656e74206475726174696f6e206973206e6f74207a65726f00000000000000604082015260600190565b6020808252600e908201526d18d85b9d0818db185a5b481e595d60921b604082015260600190565b90815260200190565b92835260ff91909116602083015263ffffffff16604082015260600190565b63ffffffff91909116815260200190565b60ff91909116815260200190565b60ff888116825260208201889052861660408201526001600160e01b031985811660608301528416608082015282151560a082015260e081016007831061400d57634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b6040518181016001600160401b03811182821017156140405761404061426c565b604052919050565b60006001600160401b038211156140615761406161426c565b5060209081020190565b6000821982111561407e5761407e614256565b500190565b60008261409e57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116140b557506140e0565b8187048211156140c7576140c7614256565b808616156140d457918102915b9490941c9380026140a6565b94509492505050565b6000612e75600019848460008261410257506001612e75565b8161410f57506000612e75565b8160018114614125576002811461412f5761415c565b6001915050612e75565b60ff84111561414057614140614256565b6001841b91508482111561415657614156614256565b50612e75565b5060208310610133831016604e8410600b841016171561418f575081810a8381111561418a5761418a614256565b612e75565b61419c84848460016140a3565b8086048211156141ae576141ae614256565b02949350505050565b600062ffffff808316818516818304811182151516156141ae576141ae614256565b60008160001904831182151516156141f3576141f3614256565b500290565b60008282101561420a5761420a614256565b500390565b60005b8381101561422a578181015183820152602001614212565b838111156102a15750506000910152565b600060001982141561424f5761424f614256565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461068657600080fd5b60ff8116811461068657600080fdfea26469706673582212201236a7540a05e343f950bfcf762a168fa09dde35c404625a0640f91cb37daa5e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimCollateral(address[],uint256[],uint256[])": {
        "details": "claim collateral on rentals that are past their due date"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4049,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IResolver)7320"
      },
      {
        "astId": 4051,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4053,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "beneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 4056,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "lendingId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4059,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "rentFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4092,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "lendingRenting",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(LendingRenting)4087_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IResolver)7320": {
        "encoding": "inplace",
        "label": "contract IResolver",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentToken)7303": {
        "encoding": "inplace",
        "label": "enum IResolver.PaymentToken",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(LendingRenting)4087_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ReNFT.LendingRenting)",
        "numberOfBytes": "32",
        "value": "t_struct(LendingRenting)4087_storage"
      },
      "t_struct(Lending)4073_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.Lending",
        "members": [
          {
            "astId": 4061,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lenderAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 4063,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "maxRentDuration",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4065,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "dailyRentPrice",
            "offset": 21,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 4067,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "nftPrice",
            "offset": 25,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 4069,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lentAmount",
            "offset": 29,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4072,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "paymentToken",
            "offset": 30,
            "slot": "0",
            "type": "t_enum(PaymentToken)7303"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LendingRenting)4087_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.LendingRenting",
        "members": [
          {
            "astId": 4083,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lending",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Lending)4073_storage"
          },
          {
            "astId": 4086,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "renting",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Renting)4080_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Renting)4080_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.Renting",
        "members": [
          {
            "astId": 4075,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "renterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 4077,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "rentDuration",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4079,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "rentedAt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}