{
  "address": "0x88B07DFF0a31707B1E20E6d3E9C09F87d89b9b8E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "claimedAt",
          "type": "uint32"
        }
      ],
      "name": "CollateralClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stoppedAt",
          "type": "uint32"
        }
      ],
      "name": "LendingStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "lentAmount",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lenderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "maxRentDuration",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "dailyRentPrice",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "nftPrice",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isERC721",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum IResolver.PaymentToken",
          "name": "paymentToken",
          "type": "uint8"
        }
      ],
      "name": "Lent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "renterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rentDuration",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "rentedAt",
          "type": "uint32"
        }
      ],
      "name": "Rented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lendingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "returnedAt",
          "type": "uint32"
        }
      ],
      "name": "Returned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_maxRentDurations",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_dailyRentPrices",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_nftPrices",
          "type": "bytes4[]"
        },
        {
          "internalType": "enum IResolver.PaymentToken[]",
          "name": "_paymentTokens",
          "type": "uint8[]"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_rentDurations",
          "type": "uint8[]"
        }
      ],
      "name": "rent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        }
      ],
      "name": "returnIt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newBeneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rentFee",
          "type": "uint256"
        }
      ],
      "name": "setRentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lendingIds",
          "type": "uint256[]"
        }
      ],
      "name": "stopLending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1959791ffcc73168e382b541ceb0b69ee6a181f3d1e7a3bd8843a3d015fa5190",
  "receipt": {
    "to": null,
    "from": "0x4F8645e873Af2355afD7E971736D6056c1758aBF",
    "contractAddress": "0x88B07DFF0a31707B1E20E6d3E9C09F87d89b9b8E",
    "transactionIndex": 3,
    "gasUsed": "3648639",
    "logsBloom": "0x
    "blockHash": "0x1bc7f276f35edec71158e3716eb63cb83a9997edad49148696adff6406985985",
    "transactionHash": "0x1959791ffcc73168e382b541ceb0b69ee6a181f3d1e7a3bd8843a3d015fa5190",
    "logs": [],
    "blockNumber": 10509563,
    "cumulativeGasUsed": "3825256",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x44c6acBEC0a1AaEafF6E53506CBe459813224005",
    "0x00E296Be39f0614917db785601E99dA175A58e34",
    "0x4F8645e873Af2355afD7E971736D6056c1758aBF"
  ],
  "solcInputHash": "8eda3c721336c59abc487573358514c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"claimedAt\",\"type\":\"uint32\"}],\"name\":\"CollateralClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stoppedAt\",\"type\":\"uint32\"}],\"name\":\"LendingStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lentAmount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxRentDuration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"dailyRentPrice\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"nftPrice\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum IResolver.PaymentToken\",\"name\":\"paymentToken\",\"type\":\"uint8\"}],\"name\":\"Lent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rentDuration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rentedAt\",\"type\":\"uint32\"}],\"name\":\"Rented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"returnedAt\",\"type\":\"uint32\"}],\"name\":\"Returned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_maxRentDurations\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_dailyRentPrices\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_nftPrices\",\"type\":\"bytes4[]\"},{\"internalType\":\"enum IResolver.PaymentToken[]\",\"name\":\"_paymentTokens\",\"type\":\"uint8[]\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_rentDurations\",\"type\":\"uint8[]\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"}],\"name\":\"returnIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rentFee\",\"type\":\"uint256\"}],\"name\":\"setRentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingIds\",\"type\":\"uint256[]\"}],\"name\":\"stopLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimCollateral(address[],uint256[],uint256[],uint256[])\":{\"details\":\"claim collateral on rentals that are past their due date\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ReNFT.sol\":\"ReNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x21d8a5dd396bee41e4a039d150af08b66b6d09eef416daf8e5edf13ef219084e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd260defa45bc1bbdf5e6d74298fb2705bf058c3d2beb17fb1158fa1a430c5024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/ReNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"./interfaces/IResolver.sol\\\";\\nimport \\\"./interfaces/IReNFT.sol\\\";\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\\ncontract ReNFT is IReNft, ERC721Holder, ERC1155Receiver, ERC1155Holder {\\n    using SafeERC20 for ERC20;\\n\\n    IResolver private resolver;\\n    address private admin;\\n    address payable private beneficiary;\\n    uint256 private lendingId = 1;\\n    bool private paused = false;\\n\\n    // in bps. so 1000 => 1%\\n    uint256 public rentFee = 1000;\\n\\n    uint256 private constant SECONDS_IN_DAY = 86400;\\n\\n    // single storage slot: address - 160 bits, 168, 200, 232, 240, 248\\n    struct Lending {\\n        address payable lenderAddress;\\n        uint8 maxRentDuration;\\n        bytes4 dailyRentPrice;\\n        bytes4 nftPrice;\\n        uint8 lentAmount;\\n        IResolver.PaymentToken paymentToken;\\n    }\\n\\n    // single storage slot: 160 bits, 168, 200\\n    struct Renting {\\n        address payable renterAddress;\\n        uint8 rentDuration;\\n        uint32 rentedAt;\\n    }\\n\\n    struct LendingRenting {\\n        Lending lending;\\n        Renting renting;\\n    }\\n\\n    mapping(bytes32 => LendingRenting) private lendingRenting;\\n\\n    struct CallData {\\n        uint256 left;\\n        uint256 right;\\n        address[] nfts;\\n        uint256[] tokenIds;\\n        uint256[] lentAmounts;\\n        uint8[] maxRentDurations;\\n        bytes4[] dailyRentPrices;\\n        bytes4[] nftPrices;\\n        uint256[] lendingIds;\\n        uint8[] rentDurations;\\n        IResolver.PaymentToken[] paymentTokens;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"ReNFT::not admin\\\");\\n        _;\\n    }\\n\\n    modifier notPaused {\\n        require(!paused, \\\"ReNFT::paused\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _resolver,\\n        address payable _beneficiary,\\n        address _admin\\n    ) {\\n        ensureIsNotZeroAddr(_resolver);\\n        ensureIsNotZeroAddr(_beneficiary);\\n        ensureIsNotZeroAddr(_admin);\\n        resolver = IResolver(_resolver);\\n        beneficiary = _beneficiary;\\n        admin = _admin;\\n    }\\n\\n    function bundleCall(function(CallData memory) _handler, CallData memory _cd)\\n        private\\n    {\\n        require(_cd.nfts.length > 0, \\\"ReNFT::no nfts\\\");\\n        while (_cd.right != _cd.nfts.length) {\\n            if (\\n                (_cd.nfts[_cd.left] == _cd.nfts[_cd.right]) &&\\n                (is1155(_cd.nfts[_cd.right]))\\n            ) {\\n                _cd.right++;\\n            } else {\\n                _handler(_cd);\\n                _cd.left = _cd.right;\\n                _cd.right++;\\n            }\\n        }\\n        _handler(_cd);\\n    }\\n\\n    // lend, rent, return, stop, claim\\n\\n    function lend(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint8[] memory _maxRentDurations,\\n        bytes4[] memory _dailyRentPrices,\\n        bytes4[] memory _nftPrices,\\n        IResolver.PaymentToken[] memory _paymentTokens\\n    ) external override notPaused {\\n        bundleCall(\\n            handleLend,\\n            createLendTP(\\n                _nfts,\\n                _tokenIds,\\n                _lendAmounts,\\n                _maxRentDurations,\\n                _dailyRentPrices,\\n                _nftPrices,\\n                _paymentTokens\\n            )\\n        );\\n    }\\n\\n    function rent(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds,\\n        uint8[] memory _rentDurations\\n    ) external override notPaused {\\n        bundleCall(\\n            handleRent,\\n            createRentTP(\\n                _nfts,\\n                _tokenIds,\\n                _lendAmounts,\\n                _lendingIds,\\n                _rentDurations\\n            )\\n        );\\n    }\\n\\n    function returnIt(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds\\n    ) external override notPaused {\\n        bundleCall(\\n            handleReturn,\\n            createActionTP(_nfts, _tokenIds, _lendAmounts, _lendingIds)\\n        );\\n    }\\n\\n    function stopLending(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds\\n    ) external override notPaused {\\n        bundleCall(\\n            handleStopLending,\\n            createActionTP(_nfts, _tokenIds, _lendAmounts, _lendingIds)\\n        );\\n    }\\n\\n    function claimCollateral(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds\\n    ) external override notPaused {\\n        bundleCall(\\n            handleClaimCollateral,\\n            createActionTP(_nfts, _tokenIds, _lendAmounts, _lendingIds)\\n        );\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function takeFee(uint256 _rent, IResolver.PaymentToken _paymentToken)\\n        private\\n        returns (uint256 fee)\\n    {\\n        fee = _rent * rentFee;\\n        fee /= 10000;\\n        uint8 paymentTokenIx = uint8(_paymentToken);\\n        ensureTokenNotSentinel(paymentTokenIx);\\n        ERC20 paymentToken = ERC20(resolver.getPaymentToken(paymentTokenIx));\\n        paymentToken.safeTransfer(beneficiary, fee);\\n    }\\n\\n    function distributePayments(\\n        LendingRenting storage _lendingRenting,\\n        uint256 _secondsSinceRentStart\\n    ) private {\\n        uint8 paymentTokenIx = uint8(_lendingRenting.lending.paymentToken);\\n        ensureTokenNotSentinel(paymentTokenIx);\\n        address paymentToken = resolver.getPaymentToken(paymentTokenIx);\\n        uint256 decimals = ERC20(paymentToken).decimals();\\n\\n        uint256 scale = 10**decimals;\\n        uint256 nftPrice = _lendingRenting.lending.lentAmount * unpackPrice(_lendingRenting.lending.nftPrice, scale);\\n        uint256 rentPrice =\\n            unpackPrice(_lendingRenting.lending.dailyRentPrice, scale);\\n        uint256 totalRenterPmtWoCollateral =\\n            rentPrice * _lendingRenting.renting.rentDuration;\\n        uint256 sendLenderAmt =\\n            (_secondsSinceRentStart * rentPrice) / SECONDS_IN_DAY;\\n        require(\\n            totalRenterPmtWoCollateral > 0,\\n            \\\"ReNFT::total payment wo collateral is zero\\\"\\n        );\\n        require(sendLenderAmt > 0, \\\"ReNFT::lender payment is zero\\\");\\n        uint256 sendRenterAmt = totalRenterPmtWoCollateral - sendLenderAmt;\\n\\n        uint256 takenFee =\\n            takeFee(sendLenderAmt, _lendingRenting.lending.paymentToken);\\n\\n        sendLenderAmt -= takenFee;\\n        sendRenterAmt += nftPrice;\\n\\n        ERC20(paymentToken).safeTransfer(\\n            _lendingRenting.lending.lenderAddress,\\n            sendLenderAmt\\n        );\\n        ERC20(paymentToken).safeTransfer(\\n            _lendingRenting.renting.renterAddress,\\n            sendRenterAmt\\n        );\\n    }\\n\\n    function distributeClaimPayment(LendingRenting memory _lendingRenting)\\n        private\\n    {\\n        uint8 paymentTokenIx = uint8(_lendingRenting.lending.paymentToken);\\n        ensureTokenNotSentinel(paymentTokenIx);\\n        ERC20 paymentToken = ERC20(resolver.getPaymentToken(paymentTokenIx));\\n\\n        uint256 decimals = ERC20(paymentToken).decimals();\\n        uint256 scale = 10**decimals;\\n        uint256 nftPrice = _lendingRenting.lending.lentAmount * unpackPrice(_lendingRenting.lending.nftPrice, scale);\\n        uint256 rentPrice =\\n            unpackPrice(_lendingRenting.lending.dailyRentPrice, scale);\\n        uint256 maxRentPayment =\\n            rentPrice * _lendingRenting.renting.rentDuration;\\n        uint256 takenFee =\\n            takeFee(maxRentPayment, IResolver.PaymentToken(paymentTokenIx));\\n        uint256 finalAmt = maxRentPayment + nftPrice;\\n\\n        require(maxRentPayment > 0, \\\"ReNFT::collateral plus rent is zero\\\");\\n\\n        paymentToken.safeTransfer(\\n            _lendingRenting.lending.lenderAddress,\\n            finalAmt - takenFee\\n        );\\n    }\\n\\n    function safeTransfer(\\n        CallData memory _cd,\\n        address _from,\\n        address _to\\n    ) private {\\n        if (is721(_cd.nfts[_cd.left])) {\\n            IERC721(_cd.nfts[_cd.left]).transferFrom(\\n                _from,\\n                _to,\\n                _cd.tokenIds[_cd.left]\\n            );\\n        } else if (is1155(_cd.nfts[_cd.left])) {\\n            IERC1155(_cd.nfts[_cd.left]).safeBatchTransferFrom(\\n                _from,\\n                _to,\\n                sliceArr(_cd.tokenIds, _cd.left, _cd.right),\\n                sliceArr(_cd.lentAmounts, _cd.left, _cd.right),\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"ReNFT::unsupported token type\\\");\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function handleLend(CallData memory _cd) private {\\n        for (uint256 i = _cd.left; i < _cd.right; i++) {\\n            ensureIsLendable(_cd, i);\\n\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _cd.nfts[_cd.left],\\n                            _cd.tokenIds[i],\\n                            lendingId\\n                        )\\n                    )\\n                ];\\n\\n            ensureIsNull(item.lending);\\n            ensureIsNull(item.renting);\\n\\n            bool nftIs721 = is721(_cd.nfts[i]);\\n            item.lending = Lending({\\n                lenderAddress: payable(msg.sender),\\n                lentAmount: nftIs721 ? 1 : uint8(_cd.lentAmounts[i]),\\n                maxRentDuration: _cd.maxRentDurations[i],\\n                dailyRentPrice: _cd.dailyRentPrices[i],\\n                nftPrice: _cd.nftPrices[i],\\n                paymentToken: _cd.paymentTokens[i]\\n            });\\n\\n            emit Lent(\\n                _cd.nfts[_cd.left],\\n                _cd.tokenIds[i],\\n                nftIs721 ? 1 : uint8(_cd.lentAmounts[i]),\\n                lendingId,\\n                msg.sender,\\n                _cd.maxRentDurations[i],\\n                _cd.dailyRentPrices[i],\\n                _cd.nftPrices[i],\\n                nftIs721,\\n                _cd.paymentTokens[i]\\n            );\\n\\n            lendingId++;\\n        }\\n\\n        safeTransfer(_cd, msg.sender, address(this));\\n    }\\n\\n    function handleRent(CallData memory _cd) private {\\n        for (uint256 i = _cd.left; i < _cd.right; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _cd.nfts[_cd.left],\\n                            _cd.tokenIds[i],\\n                            _cd.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            ensureIsNotNull(item.lending);\\n            ensureIsNull(item.renting);\\n            ensureIsRentable(item.lending, _cd, i, msg.sender);\\n\\n            uint8 paymentTokenIx = uint8(item.lending.paymentToken);\\n            ensureTokenNotSentinel(paymentTokenIx);\\n            address paymentToken = resolver.getPaymentToken(paymentTokenIx);\\n            uint256 decimals = ERC20(paymentToken).decimals();\\n\\n            {\\n                uint256 scale = 10**decimals;\\n                uint256 rentPrice =\\n                    _cd.rentDurations[i] *\\n                        unpackPrice(item.lending.dailyRentPrice, scale);\\n                uint256 nftPrice =\\n                    item.lending.lentAmount *\\n                        unpackPrice(item.lending.nftPrice, scale);\\n\\n                require(rentPrice > 0, \\\"ReNFT::rent price is zero\\\");\\n                require(nftPrice > 0, \\\"ReNFT::nft price is zero\\\");\\n\\n                ERC20(paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    rentPrice + nftPrice\\n                );\\n            }\\n\\n            item.renting.renterAddress = payable(msg.sender);\\n            item.renting.rentDuration = _cd.rentDurations[i];\\n            item.renting.rentedAt = uint32(block.timestamp);\\n\\n            emit Rented(\\n                _cd.lendingIds[i],\\n                msg.sender,\\n                _cd.rentDurations[i],\\n                item.renting.rentedAt\\n            );\\n        }\\n\\n        safeTransfer(_cd, address(this), msg.sender);\\n    }\\n\\n    function handleReturn(CallData memory _cd) private {\\n        for (uint256 i = _cd.left; i < _cd.right; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _cd.nfts[_cd.left],\\n                            _cd.tokenIds[i],\\n                            _cd.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            ensureIsNotNull(item.lending);\\n            ensureIsReturnable(item.renting, msg.sender, block.timestamp);\\n\\n            uint256 secondsSinceRentStart =\\n                block.timestamp - item.renting.rentedAt;\\n            distributePayments(item, secondsSinceRentStart);\\n\\n            emit Returned(_cd.lendingIds[i], uint32(block.timestamp));\\n\\n            delete item.renting;\\n        }\\n\\n        safeTransfer(_cd, msg.sender, address(this));\\n    }\\n\\n    function handleStopLending(CallData memory _cd) private {\\n        for (uint256 i = _cd.left; i < _cd.right; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _cd.nfts[_cd.left],\\n                            _cd.tokenIds[i],\\n                            _cd.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            ensureIsNotNull(item.lending);\\n            ensureIsNull(item.renting);\\n            ensureIsStoppable(item.lending, msg.sender);\\n\\n            emit LendingStopped(_cd.lendingIds[i], uint32(block.timestamp));\\n\\n            delete item.lending;\\n        }\\n\\n        safeTransfer(_cd, address(this), msg.sender);\\n    }\\n\\n    function handleClaimCollateral(CallData memory _cd) private {\\n        for (uint256 i = _cd.left; i < _cd.right; i++) {\\n            LendingRenting storage item =\\n                lendingRenting[\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _cd.nfts[_cd.left],\\n                            _cd.tokenIds[i],\\n                            _cd.lendingIds[i]\\n                        )\\n                    )\\n                ];\\n\\n            ensureIsNotNull(item.lending);\\n            ensureIsNotNull(item.renting);\\n            ensureIsClaimable(item.renting, block.timestamp);\\n\\n            distributeClaimPayment(item);\\n\\n            emit CollateralClaimed(_cd.lendingIds[i], uint32(block.timestamp));\\n\\n            delete item.lending;\\n            delete item.renting;\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function is721(address _nft) private view returns (bool) {\\n        return IERC165(_nft).supportsInterface(type(IERC721).interfaceId);\\n    }\\n\\n    function is1155(address _nft) private view returns (bool) {\\n        return IERC165(_nft).supportsInterface(type(IERC1155).interfaceId);\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function createLendTP(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint8[] memory _maxRentDurations,\\n        bytes4[] memory _dailyRentPrices,\\n        bytes4[] memory _nftPrices,\\n        IResolver.PaymentToken[] memory _paymentTokens\\n    ) private pure returns (CallData memory tp) {\\n        tp = CallData({\\n            left: 0,\\n            right: 1,\\n            nfts: _nfts,\\n            tokenIds: _tokenIds,\\n            lentAmounts: _lendAmounts,\\n            lendingIds: new uint256[](0),\\n            rentDurations: new uint8[](0),\\n            maxRentDurations: _maxRentDurations,\\n            dailyRentPrices: _dailyRentPrices,\\n            nftPrices: _nftPrices,\\n            paymentTokens: _paymentTokens\\n        });\\n    }\\n\\n    function createRentTP(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds,\\n        uint8[] memory _rentDurations\\n    ) private pure returns (CallData memory tp) {\\n        tp = CallData({\\n            left: 0,\\n            right: 1,\\n            nfts: _nfts,\\n            tokenIds: _tokenIds,\\n            lentAmounts: _lendAmounts,\\n            lendingIds: _lendingIds,\\n            rentDurations: _rentDurations,\\n            maxRentDurations: new uint8[](0),\\n            dailyRentPrices: new bytes4[](0),\\n            nftPrices: new bytes4[](0),\\n            paymentTokens: new IResolver.PaymentToken[](0)\\n        });\\n    }\\n\\n    function createActionTP(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds\\n    ) private pure returns (CallData memory tp) {\\n        tp = CallData({\\n            left: 0,\\n            right: 1,\\n            nfts: _nfts,\\n            tokenIds: _tokenIds,\\n            lentAmounts: _lendAmounts,\\n            lendingIds: _lendingIds,\\n            rentDurations: new uint8[](0),\\n            maxRentDurations: new uint8[](0),\\n            dailyRentPrices: new bytes4[](0),\\n            nftPrices: new bytes4[](0),\\n            paymentTokens: new IResolver.PaymentToken[](0)\\n        });\\n    }\\n\\n    function unpackPrice(bytes4 _price, uint256 _scale)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        ensureIsUnpackablePrice(_price, _scale);\\n\\n        uint16 whole = uint16(bytes2(_price));\\n        uint16 decimal = uint16(bytes2(_price << 16));\\n        uint256 decimalScale = _scale / 10000;\\n\\n        if (whole > 9999) {\\n            whole = 9999;\\n        }\\n        if (decimal > 9999) {\\n            decimal = 9999;\\n        }\\n\\n        uint256 w = whole * _scale;\\n        uint256 d = decimal * decimalScale;\\n        uint256 price = w + d;\\n\\n        return price;\\n    }\\n\\n    function sliceArr(\\n        uint256[] memory _arr,\\n        uint256 _fromIx,\\n        uint256 _toIx\\n    ) private pure returns (uint256[] memory r) {\\n        r = new uint256[](_toIx - _fromIx);\\n        for (uint256 i = _fromIx; i < _toIx; i++) {\\n            r[i - _fromIx] = _arr[i];\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function ensureIsNotZeroAddr(address _addr) private pure {\\n        require(_addr != address(0), \\\"ReNFT::zero address\\\");\\n    }\\n\\n    function ensureIsZeroAddr(address _addr) private pure {\\n        require(_addr == address(0), \\\"ReNFT::not a zero address\\\");\\n    }\\n\\n    function ensureIsNull(Lending memory _lending) private pure {\\n        ensureIsZeroAddr(_lending.lenderAddress);\\n        require(_lending.maxRentDuration == 0, \\\"ReNFT::duration not zero\\\");\\n        require(_lending.dailyRentPrice == 0, \\\"ReNFT::rent price not zero\\\");\\n        require(_lending.nftPrice == 0, \\\"ReNFT::nft price not zero\\\");\\n    }\\n\\n    function ensureIsNotNull(Lending memory _lending) private pure {\\n        ensureIsNotZeroAddr(_lending.lenderAddress);\\n        require(_lending.maxRentDuration != 0, \\\"ReNFT::duration zero\\\");\\n        require(_lending.dailyRentPrice != 0, \\\"ReNFT::rent price is zero\\\");\\n        require(_lending.nftPrice != 0, \\\"ReNFT::nft price is zero\\\");\\n    }\\n\\n    function ensureIsNull(Renting memory _renting) private pure {\\n        ensureIsZeroAddr(_renting.renterAddress);\\n        require(_renting.rentDuration == 0, \\\"ReNFT::duration not zero\\\");\\n        require(_renting.rentedAt == 0, \\\"ReNFT::rented at not zero\\\");\\n    }\\n\\n    function ensureIsNotNull(Renting memory _renting) private pure {\\n        ensureIsNotZeroAddr(_renting.renterAddress);\\n        require(_renting.rentDuration != 0, \\\"ReNFT::duration is zero\\\");\\n        require(_renting.rentedAt != 0, \\\"ReNFT::rented at is zero\\\");\\n    }\\n\\n    function ensureIsLendable(CallData memory _cd, uint256 _i) private pure {\\n        require(_cd.lentAmounts[_i] > 0, \\\"ReNFT::lend amount is zero\\\");\\n        require(_cd.lentAmounts[_i] <= type(uint8).max, \\\"ReNFT::not uint8\\\");\\n        require(_cd.maxRentDurations[_i] > 0, \\\"ReNFT::duration is zero\\\");\\n        require(\\n            _cd.maxRentDurations[_i] <= type(uint8).max,\\n            \\\"ReNFT::not uint8\\\"\\n        );\\n        require(\\n            uint32(_cd.dailyRentPrices[_i]) > 0,\\n            \\\"ReNFT::rent price is zero\\\"\\n        );\\n        require(uint32(_cd.nftPrices[_i]) > 0, \\\"ReNFT::nft price is zero\\\");\\n    }\\n\\n    function ensureIsRentable(\\n        Lending memory _lending,\\n        CallData memory _cd,\\n        uint256 _i,\\n        address _msgSender\\n    ) private pure {\\n        require(\\n            _msgSender != _lending.lenderAddress,\\n            \\\"ReNFT::cant rent own nft\\\"\\n        );\\n        require(_cd.rentDurations[_i] <= type(uint8).max, \\\"ReNFT::not uint8\\\");\\n        require(_cd.rentDurations[_i] > 0, \\\"ReNFT::duration is zero\\\");\\n        require(\\n            _cd.rentDurations[_i] <= _lending.maxRentDuration,\\n            \\\"ReNFT::rent duration exceeds allowed max\\\"\\n        );\\n    }\\n\\n    function ensureIsReturnable(\\n        Renting memory _renting,\\n        address _msgSender,\\n        uint256 _blockTimestamp\\n    ) private pure {\\n        require(_renting.renterAddress == _msgSender, \\\"ReNFT::not renter\\\");\\n        require(\\n            !isPastReturnDate(_renting, _blockTimestamp),\\n            \\\"ReNFT::past return date\\\"\\n        );\\n    }\\n\\n    function ensureIsStoppable(Lending memory _lending, address _msgSender)\\n        private\\n        pure\\n    {\\n        require(_lending.lenderAddress == _msgSender, \\\"ReNFT::not lender\\\");\\n    }\\n\\n    function ensureIsClaimable(Renting memory _renting, uint256 _blockTimestamp)\\n        private\\n        pure\\n    {\\n        require(\\n            isPastReturnDate(_renting, _blockTimestamp),\\n            \\\"ReNFT::return date not passed\\\"\\n        );\\n    }\\n\\n    function ensureIsUnpackablePrice(bytes4 _price, uint256 _scale)\\n        private\\n        pure\\n    {\\n        require(uint32(_price) > 0, \\\"ReNFT::invalid price\\\");\\n        require(_scale >= 10000, \\\"ReNFT::invalid scale\\\");\\n    }\\n\\n    function ensureTokenNotSentinel(uint8 _paymentIx) private pure {\\n        require(_paymentIx > 0, \\\"ReNFT::token is sentinel\\\");\\n    }\\n\\n    function isPastReturnDate(Renting memory _renting, uint256 _now)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        require(_now > _renting.rentedAt, \\\"ReNFT::now before rented\\\");\\n        return\\n            _now - _renting.rentedAt > _renting.rentDuration * SECONDS_IN_DAY;\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function setRentFee(uint256 _rentFee) external onlyAdmin {\\n        require(_rentFee < 10000, \\\"ReNFT::fee exceeds 100pct\\\");\\n        rentFee = _rentFee;\\n    }\\n\\n    function setBeneficiary(address payable _newBeneficiary)\\n        external\\n        onlyAdmin\\n    {\\n        beneficiary = _newBeneficiary;\\n    }\\n\\n    function setPaused(bool _paused) external onlyAdmin {\\n        paused = _paused;\\n    }\\n}\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\",\"keccak256\":\"0xd64757ef7e61aa4cf3d229cad038014b2e4e858062ce728829ee41f3b296fcb5\",\"license\":\"MIT\"},\"src/interfaces/IReNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./IResolver.sol\\\";\\n\\ninterface IReNft is IERC721Receiver, IERC1155Receiver {\\n    event Lent(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint8 lentAmount,\\n        uint256 lendingId,\\n        address indexed lenderAddress,\\n        uint8 maxRentDuration,\\n        bytes4 dailyRentPrice,\\n        bytes4 nftPrice,\\n        bool isERC721,\\n        IResolver.PaymentToken paymentToken\\n    );\\n\\n    event Rented(\\n        uint256 lendingId,\\n        address indexed renterAddress,\\n        uint8 rentDuration,\\n        uint32 rentedAt\\n    );\\n\\n    event Returned(uint256 indexed lendingId, uint32 returnedAt);\\n\\n    event CollateralClaimed(uint256 indexed lendingId, uint32 claimedAt);\\n\\n    event LendingStopped(uint256 indexed lendingId, uint32 stoppedAt);\\n\\n    /**\\n     * @dev sends your NFT to ReNFT contract, which acts as an escrow\\n     * between the lender and the renter\\n     */\\n    function lend(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendAmounts,\\n        uint8[] memory _maxRentDuration,\\n        bytes4[] memory _dailyRentPrice,\\n        bytes4[] memory _nftPrice,\\n        IResolver.PaymentToken[] memory _paymentToken\\n    ) external;\\n\\n    /**\\n     * @dev renter sends rentDuration * dailyRentPrice\\n     * to cover for the potentially full cost of renting. They also\\n     * must send the collateral (nft price set by the lender in lend)\\n     */\\n    function rent(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds,\\n        uint8[] memory _rentDurations\\n    ) external;\\n\\n    /**\\n     * @dev renters call this to return the rented NFT before the\\n     * deadline. If they fail to do so, they will lose the posted\\n     * collateral\\n     */\\n    function returnIt(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds\\n    ) external;\\n\\n    /**\\n     * @dev claim collateral on rentals that are past their due date\\n     */\\n    function claimCollateral(\\n        address[] memory _nfts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds\\n    ) external;\\n\\n    /**\\n     * @dev stop lending releases the NFT from escrow and sends it back\\n     * to the lender\\n     */\\n    function stopLending(\\n        address[] memory _nft,\\n        uint256[] memory _tokenId,\\n        uint256[] memory _lendAmounts,\\n        uint256[] memory _lendingIds\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10d145154c5d27c6fec46dc0693274844f02b36daed6fdc9781bfdcfef348227\",\"license\":\"MIT\"},\"src/interfaces/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.6;\\n\\ninterface IResolver {\\n    enum PaymentToken {SENTINEL, WETH, DAI, USDC, USDT, TUSD, RENT}\\n\\n    function getPaymentToken(uint8 _pt) external view returns (address);\\n\\n    function setPaymentToken(uint8 _pt, address _v) external;\\n}\\n\",\"keccak256\":\"0x7ec536b84659a00c2005f9ef9604b1afe0b0769b165a4ed675e2ba2a3b7ac613\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016003556004805460ff191690556103e86005553480156200002657600080fd5b50604051620040653803806200406583398101604081905262000049916200010b565b6200005483620000ad565b6200005f82620000ad565b6200006a81620000ad565b600080546001600160a01b039485166001600160a01b03199182161790915560028054938516938216939093179092556001805491909316911617905562000175565b6001600160a01b038116620001085760405162461bcd60e51b815260206004820152601360248201527f52654e46543a3a7a65726f206164647265737300000000000000000000000000604482015260640160405180910390fd5b50565b6000806000606084860312156200012157600080fd5b83516200012e816200015f565b602085015190935062000141816200015f565b604085015190925062000154816200015f565b809150509250925092565b6001600160a01b03811681146200010857600080fd5b613ee080620001856000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806376774ea31161008c578063bf2b23ea11610066578063bf2b23ea146101c6578063e50364b2146101dd578063f23a6e61146101f0578063f6ca0ca01461020f57600080fd5b806376774ea314610181578063ad68fc7c14610194578063bc197c81146101a757600080fd5b806301ffc9a7146100d457806304f87410146100fc578063150b7a021461011157806316c38b3c146101485780631c31f7101461015b578063268e87861461016e575b600080fd5b6100e76100e2366004613942565b610222565b60405190151581526020015b60405180910390f35b61010f61010a36600461372a565b610259565b005b61012f61011f3660046135b7565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100f3565b61010f610156366004613908565b6102a4565b61010f6101693660046134ed565b6102e1565b61010f61017c36600461368a565b61032d565b61010f61018f36600461395d565b610368565b61010f6101a236600461368a565b6103e8565b61012f6101b536600461350a565b63bc197c8160e01b95945050505050565b6101cf60055481565b6040519081526020016100f3565b61010f6101eb3660046137ee565b61041d565b61012f6101fe366004613622565b63f23a6e6160e01b95945050505050565b61010f61021d36600461368a565b61045e565b60006001600160e01b03198216630271189760e51b148061025357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60045460ff16156102855760405162461bcd60e51b815260040161027c90613b3a565b60405180910390fd5b61029d6104936102988787878787610a1e565b610b42565b5050505050565b6001546001600160a01b031633146102ce5760405162461bcd60e51b815260040161027c90613b98565b6004805460ff1916911515919091179055565b6001546001600160a01b0316331461030b5760405162461bcd60e51b815260040161027c90613b98565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60045460ff16156103505760405162461bcd60e51b815260040161027c90613b3a565b610362610c6e61029886868686610eb1565b50505050565b6001546001600160a01b031633146103925760405162461bcd60e51b815260040161027c90613b98565b61271081106103e35760405162461bcd60e51b815260206004820152601960248201527f52654e46543a3a66656520657863656564732031303070637400000000000000604482015260640161027c565b600555565b60045460ff161561040b5760405162461bcd60e51b815260040161027c90613b3a565b610362610fc361029886868686610eb1565b60045460ff16156104405760405162461bcd60e51b815260040161027c90613b3a565b61045561126e6102988989898989898961174f565b50505050505050565b60045460ff16156104815760405162461bcd60e51b815260040161027c90613b3a565b61036261181d61029886868686610eb1565b80515b8160200151811015610a0f5760006006600084604001518560000151815181106104c2576104c2613e4c565b6020026020010151856060015185815181106104e0576104e0613e4c565b602002602001015186610100015186815181106104ff576104ff613e4c565b6020026020010151604051602001610519939291906139ce565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b8404831660808201529093506105e9929091849160a0840191600160f01b9091041660068111156105d0576105d0613e36565b60068111156105e1576105e1613e36565b905250611b6f565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff169181019190915261063090611c1b565b6040805160c08101825282546001600160a01b038116825260ff600160a01b8204811660208401526001600160e01b0319600160a81b830460e090811b821695850195909552600160c81b830490941b9093166060830152600160e81b8104831660808301526106d792849160a0840191600160f01b9091041660068111156106bb576106bb613e36565b60068111156106cc576106cc613e36565b905250848433611cce565b8054600090600160f01b900460ff1660068111156106f7576106f7613e36565b905061070281611e39565b6000805460405163c6ee427f60e01b815260ff841660048201526001600160a01b039091169063c6ee427f9060240160206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078191906134d0565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190613976565b60ff169050600061080882600a613cfb565b855490915060009061082490600160a81b900460e01b83611e8c565b886101200151888151811061083b5761083b613e4c565b602002602001015160ff166108509190613da3565b865490915060009061086c90600160c81b900460e01b84611e8c565b87546108829190600160e81b900460ff16613da3565b9050600082116108a45760405162461bcd60e51b815260040161027c90613ad9565b600081116108c45760405162461bcd60e51b815260040161027c90613b61565b6108e533306108d38486613c7e565b6001600160a01b038916929190611f1b565b5050506001840180546001600160a01b0319163317905561012086015180518690811061091457610914613e4c565b602090810291909101015160018501805464ffffffffff60a01b1916600160a01b60ff9093169290920263ffffffff60a81b191691909117600160a81b4263ffffffff1602179055610100860151805133917f3140d73adcc923e4a0de3b1522aeec546a872bcdc06a3e25fe1209df30b954ec918890811061099857610998613e4c565b602002602001015188610120015188815181106109b7576109b7613e4c565b60209081029190910181015160018901546040805194855260ff90921692840192909252600160a81b90910463ffffffff169082015260600160405180910390a2505050508080610a0790613e05565b915050610496565b50610a1b813033611f86565b50565b610a266131c4565b604051806101600160405280600081526020016001815260200187815260200186815260200185815260200160006001600160401b03811115610a6b57610a6b613e62565b604051908082528060200260200182016040528015610a94578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610ac5578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610af6578160200160208202803683370190505b50815260208101859052604081018490526060016000604051908082528060200260200182016040528015610b35578160200160208202803683370190505b5090529695505050505050565b600081604001515111610b885760405162461bcd60e51b815260206004820152600e60248201526d52654e46543a3a6e6f206e66747360901b604482015260640161027c565b806040015151816020015114610c5d578060400151816020015181518110610bb257610bb2613e4c565b60200260200101516001600160a01b03168160400151826000015181518110610bdd57610bdd613e4c565b60200260200101516001600160a01b0316148015610c205750610c208160400151826020015181518110610c1357610c13613e4c565b602002602001015161214b565b15610c3d5760208101805190610c3582613e05565b905250610b88565b610c4a818363ffffffff16565b60208101805180835290610c3582613e05565b610c6a818363ffffffff16565b5050565b80515b8160200151811015610ea5576000600660008460400151856000015181518110610c9d57610c9d613e4c565b602002602001015185606001518581518110610cbb57610cbb613e4c565b60200260200101518661010001518681518110610cda57610cda613e4c565b6020026020010151604051602001610cf4939291906139ce565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350610dab929091849160a0840191600160f01b9091041660068111156105d0576105d0613e36565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff1691810191909152610df49033426121cd565b6001810154600090610e1390600160a81b900463ffffffff1642613dc2565b9050610e1f828261227d565b8361010001518381518110610e3657610e36613e4c565b60200260200101517f289da9cb3ecd362ad5ae230d4daa346e68abbd8972cd9c01df54b7b1b97ab15b42604051610e79919063ffffffff91909116815260200190565b60405180910390a25060010180546001600160c81b031916905580610e9d81613e05565b915050610c71565b50610a1b813330611f86565b610eb96131c4565b604051806101600160405280600081526020016001815260200186815260200185815260200184815260200160006001600160401b03811115610efe57610efe613e62565b604051908082528060200260200182016040528015610f27578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610f58578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015610f89578160200160208202803683370190505b5081526020808201949094526040805160008082528187018352828401919091528151908152948501905260600192909252509392505050565b80515b8160200151811015610a0f576000600660008460400151856000015181518110610ff257610ff2613e4c565b60200260200101518560600151858151811061101057611010613e4c565b6020026020010151866101000151868151811061102f5761102f613e4c565b6020026020010151604051602001611049939291906139ce565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b840483166080820152909350611100929091849160a0840191600160f01b9091041660068111156105d0576105d0613e36565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff169181019190915261114790611c1b565b6040805160c08101825282546001600160a01b038116825260ff600160a01b8204811660208401526001600160e01b0319600160a81b830460e090811b821695850195909552600160c81b830490941b9093166060830152600160e81b8104831660808301526111ec92849160a0840191600160f01b9091041660068111156111d2576111d2613e36565b60068111156111e3576111e3613e36565b90525033612573565b826101000151828151811061120357611203613e4c565b60200260200101517f61bcecd87c002ae006d9d8c760291b4f3646fa6109590b4b3ea93084aae4bb6a42604051611246919063ffffffff91909116815260200190565b60405180910390a280546001600160f81b03191690558061126681613e05565b915050610fc6565b80515b8160200151811015610ea55761128782826125cc565b60006006600084604001518560000151815181106112a7576112a7613e4c565b6020026020010151856060015185815181106112c5576112c5613e4c565b60200260200101516003546040516020016112e2939291906139ce565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b8404831660808201529093506113b2929091849160a0840191600160f01b90910416600681111561139957611399613e36565b60068111156113aa576113aa613e36565b905250612788565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff16918101919091526113f990611c1b565b60006114218460400151848151811061141457611414613e4c565b602002602001015161289b565b90506040518060c00160405280336001600160a01b031681526020018560a00151858151811061145357611453613e4c565b602002602001015160ff1681526020018560c00151858151811061147957611479613e4c565b60200260200101516001600160e01b03191681526020018560e0015185815181106114a6576114a6613e4c565b60200260200101516001600160e01b0319168152602001826114e557856080015185815181106114d8576114d8613e4c565b60200260200101516114e8565b60015b60ff168152602001856101400151858151811061150757611507613e4c565b6020026020010151600681111561152057611520613e36565b90528051835460208301516040840151606085015160808601516001600160a01b039095166001600160a81b031990941693909317600160a01b60ff938416021767ffffffffffffffff60a81b1916600160a81b60e092831c0263ffffffff60c81b191617600160c81b9390911c929092029190911760ff60e81b198116600160e81b9290931691909102918217855560a083015185929091839161ffff60e81b1990911660ff60f01b1990911617600160f01b8360068111156115e6576115e6613e36565b0217905550905050336001600160a01b03168460600151848151811061160e5761160e613e4c565b6020026020010151856040015186600001518151811061163057611630613e4c565b60200260200101516001600160a01b03167fc1b2f77226541f6b308379a3110d77af45464d9a161a6eb4b6cfdcd0fb2089c68461168a578760800151878151811061167d5761167d613e4c565b602002602001015161168d565b60015b6003548960a0015189815181106116a6576116a6613e4c565b60200260200101518a60c001518a815181106116c4576116c4613e4c565b60200260200101518b60e001518b815181106116e2576116e2613e4c565b6020026020010151898d61014001518d8151811061170257611702613e4c565b602002602001015160405161171d9796959493929190613bc2565b60405180910390a46003805490600061173583613e05565b91905055505050808061174790613e05565b915050611271565b6117576131c4565b604051806101600160405280600081526020016001815260200189815260200188815260200187815260200186815260200185815260200184815260200160006001600160401b038111156117ae576117ae613e62565b6040519080825280602002602001820160405280156117d7578160200160208202803683370190505b5081526020016000604051908082528060200260200182016040528015611808578160200160208202803683370190505b50815260200192909252509695505050505050565b80515b8160200151811015610c6a57600060066000846040015185600001518151811061184c5761184c613e4c565b60200260200101518560600151858151811061186a5761186a613e4c565b6020026020010151866101000151868151811061188957611889613e4c565b60200260200101516040516020016118a3939291906139ce565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160c08101845281546001600160a01b038116825260ff600160a01b82048116948301949094526001600160e01b0319600160a81b820460e090811b821696840196909652600160c81b820490951b9094166060820152600160e81b84048316608082015290935061195a929091849160a0840191600160f01b9091041660068111156105d0576105d0613e36565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff16918101919091526119a1906128d1565b6040805160608101825260018301546001600160a01b0381168252600160a01b810460ff166020830152600160a81b900463ffffffff16918101919091526119e99042612957565b604080516101008101825282546001600160a01b03811692820192835260ff600160a01b8204811660608401526001600160e01b0319600160a81b830460e090811b82166080860152600160c81b8404811b90911660a0850152600160e81b8304821660c0850152611adc94869385939192859290850191600160f01b9004166006811115611a7a57611a7a613e36565b6006811115611a8b57611a8b613e36565b905250815260408051606081018252600193909301546001600160a01b0381168452600160a01b810460ff16602080860191909152600160a81b90910463ffffffff169184019190915201526129ad565b8261010001518281518110611af357611af3613e4c565b60200260200101517f8ac1440f996b8b13e31275705c447bd09a92005cf2ec131a8183afedc636f5a242604051611b36919063ffffffff91909116815260200190565b60405180910390a280546001600160f81b031916815560010180546001600160c81b031916905580611b6781613e05565b915050611820565b8051611b7a90612bee565b602081015160ff16611bc55760405162461bcd60e51b815260206004820152601460248201527352654e46543a3a6475726174696f6e207a65726f60601b604482015260640161027c565b60408101516001600160e01b031916611bf05760405162461bcd60e51b815260040161027c90613ad9565b60608101516001600160e01b031916610a1b5760405162461bcd60e51b815260040161027c90613b61565b8051611c2690612c3a565b602081015160ff1615611c765760405162461bcd60e51b815260206004820152601860248201527752654e46543a3a6475726174696f6e206e6f74207a65726f60401b604482015260640161027c565b604081015163ffffffff1615610a1b5760405162461bcd60e51b815260206004820152601960248201527f52654e46543a3a72656e746564206174206e6f74207a65726f00000000000000604482015260640161027c565b83516001600160a01b0382811691161415611d2b5760405162461bcd60e51b815260206004820152601860248201527f52654e46543a3a63616e742072656e74206f776e206e66740000000000000000604482015260640161027c565b60ff80168361012001518381518110611d4657611d46613e4c565b602002602001015160ff161115611d6f5760405162461bcd60e51b815260040161027c90613b10565b60008361012001518381518110611d8857611d88613e4c565b602002602001015160ff1611611db05760405162461bcd60e51b815260040161027c90613aa2565b836020015160ff168361012001518381518110611dcf57611dcf613e4c565b602002602001015160ff1611156103625760405162461bcd60e51b815260206004820152602860248201527f52654e46543a3a72656e74206475726174696f6e206578636565647320616c6c6044820152670deeecac840dac2f60c31b606482015260840161027c565b60008160ff1611610a1b5760405162461bcd60e51b815260206004820152601860248201527f52654e46543a3a746f6b656e2069732073656e74696e656c0000000000000000604482015260640161027c565b6000611e988383612c91565b60f083901c61ffff60e085901c166000611eb461271086613c96565b905061270f8361ffff161115611eca5761270f92505b61270f8261ffff161115611ede5761270f91505b6000611eee8661ffff8616613da3565b90506000611f008361ffff8616613da3565b90506000611f0e8284613c7e565b9998505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526103629085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d22565b611fa3836040015184600001518151811061141457611414613e4c565b15612060576040830151835181518110611fbf57611fbf613e4c565b60200260200101516001600160a01b03166323b872dd83838660600151876000015181518110611ff157611ff1613e4c565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064015b600060405180830381600087803b15801561204c57600080fd5b505af1158015610455573d6000803e3d6000fd5b61207d8360400151846000015181518110610c1357610c13613e4c565b156120fe57604083015183518151811061209957612099613e4c565b60200260200101516001600160a01b0316632eb2c2d683836120c8876060015188600001518960200151612df4565b6120df886080015189600001518a60200151612df4565b6040518563ffffffff1660e01b81526004016120329493929190613a14565b60405162461bcd60e51b815260206004820152601d60248201527f52654e46543a3a756e737570706f7274656420746f6b656e2074797065000000604482015260640161027c565b505050565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526000906001600160a01b038316906301ffc9a7906024015b60206040518083038186803b15801561219557600080fd5b505afa1580156121a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102539190613925565b816001600160a01b031683600001516001600160a01b0316146122265760405162461bcd60e51b81526020600482015260116024820152702932a7232a1d1d3737ba103932b73a32b960791b604482015260640161027c565b6122308382612ea9565b156121465760405162461bcd60e51b815260206004820152601760248201527f52654e46543a3a706173742072657475726e2064617465000000000000000000604482015260640161027c565b8154600090600160f01b900460ff16600681111561229d5761229d613e36565b90506122a881611e39565b6000805460405163c6ee427f60e01b815260ff841660048201526001600160a01b039091169063c6ee427f9060240160206040518083038186803b1580156122ef57600080fd5b505afa158015612303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232791906134d0565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561236457600080fd5b505afa158015612378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239c9190613976565b60ff16905060006123ae82600a613cfb565b86549091506000906123ca90600160c81b900460e01b83611e8c565b87546123e09190600160e81b900460ff16613da3565b87549091506000906123fc90600160a81b900460e01b84611e8c565b600189015490915060009061241b90600160a01b900460ff1683613da3565b905060006201518061242d848b613da3565b6124379190613c96565b90506000821161249c5760405162461bcd60e51b815260206004820152602a60248201527f52654e46543a3a746f74616c207061796d656e7420776f20636f6c6c61746572604482015269616c206973207a65726f60b01b606482015260840161027c565b600081116124ec5760405162461bcd60e51b815260206004820152601d60248201527f52654e46543a3a6c656e646572207061796d656e74206973207a65726f000000604482015260640161027c565b60006124f88284613dc2565b8b54909150600090612515908490600160f01b900460ff16612f37565b90506125218184613dc2565b925061252d8683613c7e565b8c54909250612549906001600160a01b038b811691168561301a565b60018c0154612565906001600160a01b038b811691168461301a565b505050505050505050505050565b806001600160a01b031682600001516001600160a01b031614610c6a5760405162461bcd60e51b81526020600482015260116024820152702932a7232a1d1d3737ba103632b73232b960791b604482015260640161027c565b6000826080015182815181106125e4576125e4613e4c565b6020026020010151116126395760405162461bcd60e51b815260206004820152601a60248201527f52654e46543a3a6c656e6420616d6f756e74206973207a65726f000000000000604482015260640161027c565b60ff80168260800151828151811061265357612653613e4c565b602002602001015111156126795760405162461bcd60e51b815260040161027c90613b10565b60008260a00151828151811061269157612691613e4c565b602002602001015160ff16116126b95760405162461bcd60e51b815260040161027c90613aa2565b60ff80168260a0015182815181106126d3576126d3613e4c565b602002602001015160ff1611156126fc5760405162461bcd60e51b815260040161027c90613b10565b60008260c00151828151811061271457612714613e4c565b602002602001015160e01c63ffffffff16116127425760405162461bcd60e51b815260040161027c90613ad9565b60008260e00151828151811061275a5761275a613e4c565b602002602001015160e01c63ffffffff1611610c6a5760405162461bcd60e51b815260040161027c90613b61565b805161279390612c3a565b602081015160ff16156127e35760405162461bcd60e51b815260206004820152601860248201527752654e46543a3a6475726174696f6e206e6f74207a65726f60401b604482015260640161027c565b60408101516001600160e01b0319161561283f5760405162461bcd60e51b815260206004820152601a60248201527f52654e46543a3a72656e74207072696365206e6f74207a65726f000000000000604482015260640161027c565b60608101516001600160e01b03191615610a1b5760405162461bcd60e51b815260206004820152601960248201527f52654e46543a3a6e6674207072696365206e6f74207a65726f00000000000000604482015260640161027c565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038316906301ffc9a79060240161217d565b80516128dc90612bee565b602081015160ff166129005760405162461bcd60e51b815260040161027c90613aa2565b604081015163ffffffff16610a1b5760405162461bcd60e51b815260206004820152601860248201527f52654e46543a3a72656e746564206174206973207a65726f0000000000000000604482015260640161027c565b6129618282612ea9565b610c6a5760405162461bcd60e51b815260206004820152601d60248201527f52654e46543a3a72657475726e2064617465206e6f7420706173736564000000604482015260640161027c565b805160a0015160009060068111156129c7576129c7613e36565b90506129d281611e39565b6000805460405163c6ee427f60e01b815260ff841660048201526001600160a01b039091169063c6ee427f9060240160206040518083038186803b158015612a1957600080fd5b505afa158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5191906134d0565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8e57600080fd5b505afa158015612aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac69190613976565b60ff1690506000612ad882600a613cfb565b90506000612aee86600001516060015183611e8c565b865160800151612b01919060ff16613da3565b90506000612b1787600001516040015184611e8c565b9050600087602001516020015160ff1682612b329190613da3565b90506000612b54828960ff166006811115612b4f57612b4f613e36565b612f37565b90506000612b628584613c7e565b905060008311612bc05760405162461bcd60e51b815260206004820152602360248201527f52654e46543a3a636f6c6c61746572616c20706c75732072656e74206973207a60448201526265726f60e81b606482015260840161027c565b895151612be290612bd18484613dc2565b6001600160a01b038b16919061301a565b50505050505050505050565b6001600160a01b038116610a1b5760405162461bcd60e51b815260206004820152601360248201527252654e46543a3a7a65726f206164647265737360681b604482015260640161027c565b6001600160a01b03811615610a1b5760405162461bcd60e51b815260206004820152601960248201527f52654e46543a3a6e6f742061207a65726f206164647265737300000000000000604482015260640161027c565b60e082901c612cd95760405162461bcd60e51b815260206004820152601460248201527352654e46543a3a696e76616c696420707269636560601b604482015260640161027c565b612710811015610c6a5760405162461bcd60e51b815260206004820152601460248201527352654e46543a3a696e76616c6964207363616c6560601b604482015260640161027c565b6000612d77826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661304a9092919063ffffffff16565b8051909150156121465780806020019051810190612d959190613925565b6121465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161027c565b6060612e008383613dc2565b6001600160401b03811115612e1757612e17613e62565b604051908082528060200260200182016040528015612e40578160200160208202803683370190505b509050825b82811015612ea157848181518110612e5f57612e5f613e4c565b6020026020010151828583612e749190613dc2565b81518110612e8457612e84613e4c565b602090810291909101015280612e9981613e05565b915050612e45565b509392505050565b6000826040015163ffffffff168211612f045760405162461bcd60e51b815260206004820152601860248201527f52654e46543a3a6e6f77206265666f72652072656e7465640000000000000000604482015260640161027c565b62015180836020015160ff16612f1a9190613da3565b6040840151612f2f9063ffffffff1684613dc2565b119392505050565b600060055483612f479190613da3565b9050612f5561271082613c96565b90506000826006811115612f6b57612f6b613e36565b9050612f7681611e39565b6000805460405163c6ee427f60e01b815260ff841660048201526001600160a01b039091169063c6ee427f9060240160206040518083038186803b158015612fbd57600080fd5b505afa158015612fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff591906134d0565b600254909150613012906001600160a01b0380841691168561301a565b505092915050565b6040516001600160a01b03831660248201526044810182905261214690849063a9059cbb60e01b90606401611f4f565b60606130598484600085613063565b90505b9392505050565b6060824710156130c45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161027c565b843b6131125760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027c565b600080866001600160a01b0316858760405161312e91906139f8565b60006040518083038185875af1925050503d806000811461316b576040519150601f19603f3d011682016040523d82523d6000602084013e613170565b606091505b509150915061318082828661318b565b979650505050505050565b6060831561319a57508161305c565b8251156131aa5782518084602001fd5b8160405162461bcd60e51b815260040161027c9190613a6f565b60405180610160016040528060008152602001600081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b600082601f83011261322f57600080fd5b8135602061324461323f83613c5b565b613c2b565b80838252828201915082860187848660051b890101111561326457600080fd5b60005b8581101561328c57813561327a81613e78565b84529284019290840190600101613267565b5090979650505050505050565b600082601f8301126132aa57600080fd5b813560206132ba61323f83613c5b565b80838252828201915082860187848660051b89010111156132da57600080fd5b60005b8581101561328c576132ee82613444565b845292840192908401906001016132dd565b600082601f83011261331157600080fd5b8135602061332161323f83613c5b565b80838252828201915082860187848660051b890101111561334157600080fd5b6000805b8681101561336d5782356007811061335b578283fd5b85529385019391850191600101613345565b509198975050505050505050565b600082601f83011261338c57600080fd5b8135602061339c61323f83613c5b565b80838252828201915082860187848660051b89010111156133bc57600080fd5b60005b8581101561328c578135845292840192908401906001016133bf565b600082601f8301126133ec57600080fd5b813560206133fc61323f83613c5b565b80838252828201915082860187848660051b890101111561341c57600080fd5b60005b8581101561328c57813561343281613e9b565b8452928401929084019060010161341f565b80356001600160e01b03198116811461345c57600080fd5b919050565b600082601f83011261347257600080fd5b81356001600160401b0381111561348b5761348b613e62565b61349e601f8201601f1916602001613c2b565b8181528460208386010111156134b357600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156134e257600080fd5b815161305c81613e78565b6000602082840312156134ff57600080fd5b813561305c81613e78565b600080600080600060a0868803121561352257600080fd5b853561352d81613e78565b9450602086013561353d81613e78565b935060408601356001600160401b038082111561355957600080fd5b61356589838a0161337b565b9450606088013591508082111561357b57600080fd5b61358789838a0161337b565b9350608088013591508082111561359d57600080fd5b506135aa88828901613461565b9150509295509295909350565b600080600080608085870312156135cd57600080fd5b84356135d881613e78565b935060208501356135e881613e78565b92506040850135915060608501356001600160401b0381111561360a57600080fd5b61361687828801613461565b91505092959194509250565b600080600080600060a0868803121561363a57600080fd5b853561364581613e78565b9450602086013561365581613e78565b9350604086013592506060860135915060808601356001600160401b0381111561367e57600080fd5b6135aa88828901613461565b600080600080608085870312156136a057600080fd5b84356001600160401b03808211156136b757600080fd5b6136c38883890161321e565b955060208701359150808211156136d957600080fd5b6136e58883890161337b565b945060408701359150808211156136fb57600080fd5b6137078883890161337b565b9350606087013591508082111561371d57600080fd5b506136168782880161337b565b600080600080600060a0868803121561374257600080fd5b85356001600160401b038082111561375957600080fd5b61376589838a0161321e565b9650602088013591508082111561377b57600080fd5b61378789838a0161337b565b9550604088013591508082111561379d57600080fd5b6137a989838a0161337b565b945060608801359150808211156137bf57600080fd5b6137cb89838a0161337b565b935060808801359150808211156137e157600080fd5b506135aa888289016133db565b600080600080600080600060e0888a03121561380957600080fd5b87356001600160401b038082111561382057600080fd5b61382c8b838c0161321e565b985060208a013591508082111561384257600080fd5b61384e8b838c0161337b565b975060408a013591508082111561386457600080fd5b6138708b838c0161337b565b965060608a013591508082111561388657600080fd5b6138928b838c016133db565b955060808a01359150808211156138a857600080fd5b6138b48b838c01613299565b945060a08a01359150808211156138ca57600080fd5b6138d68b838c01613299565b935060c08a01359150808211156138ec57600080fd5b506138f98a828b01613300565b91505092959891949750929550565b60006020828403121561391a57600080fd5b813561305c81613e8d565b60006020828403121561393757600080fd5b815161305c81613e8d565b60006020828403121561395457600080fd5b61305c82613444565b60006020828403121561396f57600080fd5b5035919050565b60006020828403121561398857600080fd5b815161305c81613e9b565b600081518084526020808501945080840160005b838110156139c3578151875295820195908201906001016139a7565b509495945050505050565b60609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b60008251613a0a818460208701613dd9565b9190910192915050565b6001600160a01b0385811682528416602082015260a060408201819052600090613a4090830185613993565b8281036060840152613a528185613993565b838103608090940193909352505060008152602001949350505050565b6020815260008251806020840152613a8e816040850160208701613dd9565b601f01601f19169190910160400192915050565b60208082526017908201527f52654e46543a3a6475726174696f6e206973207a65726f000000000000000000604082015260600190565b60208082526019908201527f52654e46543a3a72656e74207072696365206973207a65726f00000000000000604082015260600190565b60208082526010908201526f0a4ca9c8ca87474dcdee840ead2dce8760831b604082015260600190565b6020808252600d908201526c14995391950e8e9c185d5cd959609a1b604082015260600190565b60208082526018908201527f52654e46543a3a6e6674207072696365206973207a65726f0000000000000000604082015260600190565b60208082526010908201526f2932a7232a1d1d3737ba1030b236b4b760811b604082015260600190565b60ff888116825260208201889052861660408201526001600160e01b031985811660608301528416608082015282151560a082015260e0810160078310613c1957634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b604051601f8201601f191681016001600160401b0381118282101715613c5357613c53613e62565b604052919050565b60006001600160401b03821115613c7457613c74613e62565b5060051b60200190565b60008219821115613c9157613c91613e20565b500190565b600082613cb357634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613cf3578160001904821115613cd957613cd9613e20565b80851615613ce657918102915b93841c9390800290613cbd565b509250929050565b600061305c8383600082613d1157506001610253565b81613d1e57506000610253565b8160018114613d345760028114613d3e57613d5a565b6001915050610253565b60ff841115613d4f57613d4f613e20565b50506001821b610253565b5060208310610133831016604e8410600b8410161715613d7d575081810a610253565b613d878383613cb8565b8060001904821115613d9b57613d9b613e20565b029392505050565b6000816000190483118215151615613dbd57613dbd613e20565b500290565b600082821015613dd457613dd4613e20565b500390565b60005b83811015613df4578181015183820152602001613ddc565b838111156103625750506000910152565b6000600019821415613e1957613e19613e20565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a1b57600080fd5b8015158114610a1b57600080fd5b60ff81168114610a1b57600080fdfea264697066735822122060f03b3da37440545ad00411fc4136f9fc1a84089326ec6b832b15f8e05ce09964736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimCollateral(address[],uint256[],uint256[],uint256[])": {
        "details": "claim collateral on rentals that are past their due date"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4170,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "resolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IResolver)7484"
      },
      {
        "astId": 4172,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4174,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "beneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 4177,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "lendingId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4180,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 4183,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "rentFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4219,
        "contract": "src/ReNFT.sol:ReNFT",
        "label": "lendingRenting",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(LendingRenting)4214_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IResolver)7484": {
        "encoding": "inplace",
        "label": "contract IResolver",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentToken)7469": {
        "encoding": "inplace",
        "label": "enum IResolver.PaymentToken",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(LendingRenting)4214_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ReNFT.LendingRenting)",
        "numberOfBytes": "32",
        "value": "t_struct(LendingRenting)4214_storage"
      },
      "t_struct(Lending)4200_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.Lending",
        "members": [
          {
            "astId": 4188,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lenderAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 4190,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "maxRentDuration",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4192,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "dailyRentPrice",
            "offset": 21,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 4194,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "nftPrice",
            "offset": 25,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 4196,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lentAmount",
            "offset": 29,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4199,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "paymentToken",
            "offset": 30,
            "slot": "0",
            "type": "t_enum(PaymentToken)7469"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LendingRenting)4214_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.LendingRenting",
        "members": [
          {
            "astId": 4210,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "lending",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Lending)4200_storage"
          },
          {
            "astId": 4213,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "renting",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Renting)4207_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Renting)4207_storage": {
        "encoding": "inplace",
        "label": "struct ReNFT.Renting",
        "members": [
          {
            "astId": 4202,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "renterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 4204,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "rentDuration",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4206,
            "contract": "src/ReNFT.sol:ReNFT",
            "label": "rentedAt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}